<!--* Copyright Epic Systems Corporation 2010-2020. All rights reserved.-->  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:its="http://www.w3.org/2005/11/its" xmlns:epicdoc="urn:epicsystems-com:Community.2006-04.Services" xmlns:cda="urn:hl7-org:v3" xmlns:sdtc="urn:hl7-org:sdtc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="epicdoc cda sdtc">   <xsl:param name="context"/> <xsl:param name="bgColor">  </xsl:param>  <xsl:param name="printDocDate"/>     <xsl:param name="showProvenance" />   <xsl:param name="nonceForStyle" />    <xsl:param name="showPartialView"/> <xsl:param name="sectionToLoad"/>     <xsl:variable name="showUS">HideUS</xsl:variable> <xsl:variable name="lucyMyCh" select="boolean(cda:ClinicalDocument/cda:templateId/@root='1.2.840.114350.1.72.1.77896772')" /> <xsl:variable name="isPublicStr"> <xsl:choose>   <xsl:when test="true()">1</xsl:when> </xsl:choose> </xsl:variable>   <xsl:variable name="isPublic" select="$isPublicStr=1" />   <xsl:variable name="partialViewConfig"> <xsl:choose> <xsl:when test="$showPartialView='1' and $sectionToLoad=''">main</xsl:when> <xsl:when test="$showPartialView='1' and $sectionToLoad!=''">singleSection</xsl:when> <xsl:otherwise>full</xsl:otherwise> </xsl:choose> </xsl:variable>  <xsl:variable name="maxToShow"> <xsl:choose> <xsl:when test="$partialViewConfig='main'">30</xsl:when> <xsl:otherwise>99999</xsl:otherwise> </xsl:choose> </xsl:variable>   <xsl:variable name="patientNames" select="cda:ClinicalDocument/cda:recordTarget[1]/cda:patientRole/cda:patient/cda:name"/>  <xsl:variable name="showDisclaimer"> <xsl:value-of select="(cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:code/@code='X-DOCDATADISCLAIMER']) != ''"/> </xsl:variable>  <xsl:variable name="patientName"> <xsl:call-template name="Name">  <xsl:with-param name="name" select="$patientNames[1]"/>  <xsl:with-param name="preferred" select="$patientNames[*[@qualifier='CL'] and position() &gt; 1][1]"/> </xsl:call-template> </xsl:variable>   <xsl:variable name="patientContacts" select="cda:ClinicalDocument/cda:recordTarget[1]/cda:patientRole/cda:patient/cda:guardian | cda:ClinicalDocument/cda:participant[@typeCode='IND' and not(cda:functionCode[@code='PCP' or @code='PP'])]/cda:associatedEntity" />  <xsl:variable name="docDate"> <xsl:choose> <xsl:when test="$printDocDate != ''"> <xsl:value-of select="$printDocDate"/> </xsl:when> <xsl:otherwise> <xsl:value-of select="cda:ClinicalDocument/cda:effectiveTime/@value"/> </xsl:otherwise> </xsl:choose> </xsl:variable>  <xsl:variable name="deceasedStatus" select="cda:ClinicalDocument/cda:recordTarget[1]/cda:patientRole/cda:patient/sdtc:deceasedInd/@value"/> <xsl:variable name="deceasedTime"> <xsl:if test="$deceasedStatus='true'"> <xsl:call-template name="AccessibleDate"> <xsl:with-param name="date" select="cda:ClinicalDocument/cda:recordTarget[1]/cda:patientRole/cda:patient/sdtc:deceasedTime/@value" /> </xsl:call-template> </xsl:if> </xsl:variable>       <xsl:variable name="Yes" xml:id="langYes">Yes</xsl:variable> <xsl:variable name="No" xml:id="langNo">No</xsl:variable>  <xsl:variable name="Unknown" xml:id="langUnknown">Unknown</xsl:variable> <xsl:variable name="AgeYO" xml:id="langYO">y.o.</xsl:variable> <xsl:variable name="AgeMO" xml:id="langMO">m.o.</xsl:variable> <xsl:variable name="AgeWO" xml:id="langWO">w.o.</xsl:variable> <xsl:variable name="AgeDO" xml:id="langDO">d.o.</xsl:variable>  <xsl:variable name="DemogTitle" xml:id="langPatientDemog">Patient Demographics</xsl:variable> <xsl:variable name="ContactsTitle" xml:id="langPatientContacts">Patient Contacts</xsl:variable> <xsl:variable name="MetadataTitle" xml:id="langDocInfoTitle">Document Information</xsl:variable> <xsl:variable name="TextTitle" xml:id="langMessageTextTitle">Message Text</xsl:variable> <xsl:variable name="PCPLabel" xml:id="langPCP">Primary Care Provider</xsl:variable> <xsl:variable name="Communication" xml:id="langCommunication">Communication</xsl:variable>  <xsl:variable name="ImgMailingAlt" xml:id="langAltMailing">Mailing address</xsl:variable> <xsl:variable name="ImgPhoneAlt" xml:id="langAltPhone">Telephone</xsl:variable> <xsl:variable name="ImgUSBAlt" xml:id="langAltUSB">Carry Lucy on your thumb drive</xsl:variable>  <xsl:variable name="ListSep" xml:id="langListSep">, </xsl:variable> <xsl:variable name="ImgInTransit" xml:id="langImgInTransit">Image in transit</xsl:variable> <xsl:variable name="ImgSecTitle" xml:id="langImgSecTitle">Images</xsl:variable>  <xsl:variable name="DeceasedLabel"> (Deceased) </xsl:variable>  <xsl:variable name="Male" xml:id="langMale">Male</xsl:variable> <xsl:variable name="Female" xml:id="langFemale">Female</xsl:variable> <xsl:variable name="Transgender" xml:id="langTransgender">Transgender</xsl:variable> <xsl:variable name="PrintoutInformation" xml:id="langPrintoutInformation">Printout Information</xsl:variable>  <xsl:variable name="Other" xml:id="langOther">Other</xsl:variable>   <xsl:variable name="lcletters">abcdefghijklmnopqrstuvwxyz</xsl:variable> <xsl:variable name="ucletters">ABCDEFGHIJKLMNOPQRSTUVWXYZ</xsl:variable>    <xsl:output method="html" doctype-system="about:legacy-compat"/>   <xsl:template match="cda:ClinicalDocument">   <html lang="en"> <head>   <xsl:if test="$context='VB' or $context='ECL' or $isPublic"> <meta http-equiv="X-UA-Compatible" content="IE=edge"/> </xsl:if> <meta id="viewport" name="viewport" content="width=device-width, initial-scale=0.6"/>  <title><xsl:value-of select="cda:title"/></title> <style type="text/css" media="print"> <xsl:if test="$nonceForStyle!=''"> <xsl:attribute name="nonce"> <xsl:value-of select="$nonceForStyle"/> </xsl:attribute> </xsl:if>  #DocBody { overflow: visible !important; height: auto !important; }  div.printOnly { display: block; }  span.printOnly { display: inline; }  .CE-Default .HeadCard, .CE-Default .sectionBody, .CE-Default .ShowAll{     border-right:1px solid #eee !important;     border-bottom:1px solid #eee !important; } #langBorn, #deceasedStatus{     display:inline-block;     white-space:pre; } #langBorn{     padding-right:10px; }  .Section {     position:relative; page-break-inside:avoid; }  *:not(td).allIndent { display:inline !important; } #tocHead { display:none !important; }  .CustomizeLink {  display: none !important;  }   .screenOnly { display: none !important; }  table.printOnly { display: table; }  .innerTd{     padding-left:0; }  @media (-webkit-min-device-pixel-ratio:0) {     thead {     display: table-row-group;     }               .alt .Rrule {border-right:2px solid #BFBFBF;}          .TableRow td {      border-top: 2px solid #E0E0E0 !important;       } }  .sectionBody{     display: block !important; }  .incompleteSection{ width: 100%; left: 0; bottom: 0; padding: 10px 0px 10px 0px; text-align: center; font-size: 20px;     border-color: #FFFF99; }  .loadSectionButton { display: none; }  .truncated { overflow: visible; max-height: 100% !important; }  .truncatedHidden { display: block !important; }  .gradient { display: none; }  caption.SRonlyCaption {     position:relative !important;     left:-10000px;     width:0;     margin:0;     padding:0;     height:0; } </style>  <style type="text/css"> <xsl:if test="$nonceForStyle!=''"> <xsl:attribute name="nonce"> <xsl:value-of select="$nonceForStyle"/> </xsl:attribute> </xsl:if> /*** Layout ***/ body{ height:100%; width:100%; margin: 0; -webkit-text-size-adjust: none; -moz-text-size-adjust: none; -ms-text-size-adjust: none; text-size-adjust: none; }  body:not(.CELoadingBanner) #AlertBanner { display: none; }  #DocHead { box-sizing: border-box;  width: 100%; max-width:100%; }  #AlertBannerHeader { display:none; }  #navigationBanner { width:100%; display: inline-block; }  .CE-HSNative #DocHead { padding-top: 0px; padding-bottom: 5px; } .CE-Default #DocHead { padding: 5px 7px 5px 5px; }  .CE-HSNative #DocBody { padding-bottom: 0px; padding-top: 0px; }  .CE-Default .HeadCard{     padding:5px 5px 5px 10px; }  #HeaderRelativeContainer { position: relative;  margin-bottom: 0px; }  .CE-HSNative .tileList { list-style-type:none; margin:0; }  .CE-Default .Section{     padding:0px 7px 7px 5px; max-width:100%;     position:relative; } .CE-HSNative .Section { max-width:100%; } .Section > div td tr table { width:100%; }  .CE-HSNative .subTitle { padding-right: 10px;  }  #langTOCShowAllSections{     padding:15px 0px;     margin:15px 0px;     text-align:center;     margin-left:10%;     margin-right:10%;     display: none;      }  .CustomizeLink{     display:inline-block;     vertical-align:middle; }   .Section .Section { padding: 5px; }   .CE-Default .sectionHead{     overflow:hidden; padding-right:9px; overflow-x:auto; } .CE-Default .sectionHead h2{ padding-right: 5px; padding-left: 5px; }  .sectionBody{ min-height:20px; min-width:100%; display:inline-block; box-sizing:border-box; position:relative; } .truncated { overflow: hidden; max-height: 600px; } .truncatedHidden { display: none; } .gradient { position: absolute; bottom: 0; left: 0; width: 100%; text-align: center; margin: 0; padding: 30px 0; background-image: linear-gradient(to bottom, transparent, white 95%); height: 100px; } .loadSectionButton { padding: 10px 0px 10px 0px; font-weight: 600; bottom: 0; position: absolute; cursor: pointer; background-color: rgba(255,255,255,0.1); transition: background-color 0.3s ease; width: 100%; left: 0; } .loadSectionButton:hover { background-color: #eef7ff; text-decoration: none !important; } .button-back { background-color: transparent; border: 1px solid transparent; float:left; margin: 5px 0 0 0; } .button-back:hover{  background-color: #eef7ff; text-decoration: none !important; } .alertIcon { vertical-align: middle; padding-right: 5px; } .jumpIcon { margin-bottom: -3px; } .CE-Default .sectionBody{ padding-top:1px; padding-bottom:1px;   margin-right:7px; }   .CE-Default h2, .CE-Default h4{     margin:0;     display:inline; } .CE-Default h1, .CE-Default h3{     margin:0;     display:block; }  .CE-Default table{     border-spacing:0;     width:100%; } .CE-Default caption{     text-align:left; } .CE-Default td {     padding-left:6px;     vertical-align:top; } .CE-Default th {     vertical-align:bottom;     text-align:left; } .CE-HSNative th { text-align:left; } .CE-Default th, .CE-Default td.monospace{     padding-left:6px !important; } .CE-HSNative td, .CE-HSNative th { padding:0pt 1pt 0pt 1pt; } .CE-HSNative tr { vertical-align:top; } .allIndent { padding-left: 8px; display:inline-block; } td.allIndent { padding-left: 22px; text-indent: 0px; display:table-cell; }  .noWrap { white-space: nowrap; }  #B64DATA { white-space: pre-wrap; }  .right { float:right; padding-right:6px; }  .CE-Default .hIcon{ padding-top:2px; position:absolute; margin-left:-18px; float:left; z-index:99; width:16px; height:16px; }  img { max-width:100%; }   .CE-Default .Block{     display:table-cell;     box-sizing:border-box;     vertical-align:top;     width:25%;  }  .ChildBlock {     display:inline-block;     vertical-align:top;     margin-right:20px;     padding-bottom:10px; }  #langBorn, #deceasedStatus{  white-space: nowrap; } #deceasedStatus{ padding-right:10px; } /*** Fonts ***/ .CE-Default, .CE-Default td, .CE-Default th, .CE-Default .normal{     font:10pt 'Segoe UI', 'Roboto', 'Helvetica Neue', Helvetica, Arial, sans-serif;      line-height:12pt;     font-weight:normal; }  .CE-Default h1, .CE-Default h2{     font-size:15pt;     line-height:21pt;     font-weight:normal; }  .CE-Default h3, .CE-Default .tableCaption{     font-size:11pt;     line-height:15pt;     font-weight:normal; }  .CE-Default h4{     font-size:11pt;     line-height:13pt;     font-weight:600;     color:black; }  .CE-Default h5{     color:#777; }  .CE-Default .smaller{     font-size:8pt;     line-height:9pt; }  .monospace{font-family:'Lucida Console', 'Courier New', monospace !important;} .CE-Default .monospace{     font-size:9pt;     line-height:10pt; }  .CE-HSNative #CECRpatientBanner { font-size: small; overflow: hidden; } .CE-HSNative #CECRpatientBanner .alertContent { padding-right:0; }  /*** Colors and Borders ***/ #document, body {     background:#EEE;  }  .CE-Default a, .CE-Default a:hover, .CE-Default a:visited{color:#00F} .CE-Default a{text-decoration:none;} .CE-Default a:hover{text-decoration:underline;}  .CE-Default #langTOCShowAllSections{     background:#F0F0FB; }  .CustomizeLink{     opacity:0.8; }  .CustomizeLink:hover{     opacity:1.0; }   .CE-Default .bodyR, .CE-Default .R th{ border-color:#FB7373 } .CE-Default .bodyO, .CE-Default .O th{ border-color:#FDBA19 } .CE-Default .bodyG, .CE-Default .G th{ border-color:#1EB37A } .CE-Default .bodyB, .CE-Default .B th{ border-color:#34B4FF } .CE-Default .bodyC, .CE-Default .C th{ border-color:#0CA99D } .CE-Default .bodyE, .CE-Default .E th{ border-color:#C0C7D2 } .CE-Default .bodyP, .CE-Default .P th{ border-color:#B387FF }   .CE-Default .headR, .CE-Default .R h3, .CE-Default .R .tableCaption{ color:#BB4D4D } .CE-Default .headO, .CE-Default .O h3, .CE-Default .O .tableCaption{ color:#95711D } .CE-Default .headG, .CE-Default .G h3, .CE-Default .G .tableCaption{ color:#157953 } .CE-Default .headB, .CE-Default .B h3, .CE-Default .B .tableCaption{ color:#2073A3 } .CE-Default .headC, .CE-Default .C h3, .CE-Default .C .tableCaption{ color:#0E766E } .CE-Default .headE, .CE-Default .E h3, .CE-Default .E .tableCaption{ color:#6D7179 } .CE-Default .headP, .CE-Default .P h3, .CE-Default .P .tableCaption{ color:#8760CA }   .CE-Default .R .alt td{ background-color:#FBF7F7 } .CE-Default .O .alt td{ background-color:#F7F7F5 } .CE-Default .G .alt td{ background-color:#F4F7F4 } .CE-Default .B .alt td{ background-color:#F6F8FB } .CE-Default .C .alt td{ background-color:#F2F8F8 } .CE-Default .E .alt td{ background-color:#F7F7F7 } .CE-Default .P .alt td{ background-color:#f9f9ff }   .CE-Default .HeadCard, .CE-Default .sectionBody, .CE-Default .ShowAll{     background-color:#FFF;     -webkit-box-shadow:0px 1px 4px 0px rgba(0, 0, 0, 0.25);     -moz-box-shadow:0px 1px 4px 0px rgba(0, 0, 0, 0.25);     box-shadow:0px 1px 4px 0px rgba(0, 0, 0, 0.25); }  .CE-Default .HeadCard{     border-top:1px solid #eee;     border-left:1px solid #eee; }   .CE-Default .sectionBody{     border-left-width:5px;     border-left-style:solid;     border-right:0;     border-top:0;     border-bottom:0; }  .CE-Default th{     border-bottom:1px solid; } .CE-Default tfoot td{     border-top:1px solid #E0E0E0; }  .CE-Default .ListRow:not(:first-child), .CE-Default .TableRow td{     border-top:1px solid #E0E0E0; }  .CE-Default #langTOCShowAllSections{     border-left:none; }   .CE-Default th, .CE-Default .cellHeader{color:#666} .CE-Default .historical td{color:#717171}  .fixedTableLayout{ table-layout: fixed; overflow-wrap: break-word; }  .width20{ width:20% !important; } .width25{ width:25% !important; } .width50{ width:50% !important; } .width75{ width:75% !important; } .widthAuto{ width:auto; }  .docTypeHeader { font-size: inherit; line-height: inherit; font-weight: inherit; display: inline-block; }  #LucyThumb { text-align: center; vertical-align: middle; }  .displayInline{ display:inline !important; }  /*** Styling for download icons ***/ img[class^="CEDownload"] { display: block; position: absolute; bottom: 3px; right: 3px; width: 18px; height: 18px; z-index: 97; } body[class*="CENoAuth"] img[class*="CEDownload"], body[class*="CENoSecurity"] img[class*="CEDownload"], body[class*="CEReadOnly"] img[class*="CEDownload"] { display: none; }   /*** Styling for no-auth icons ***/ /*** Styling for disabling a link; used if no auth/auth is pinging ***/ .link-disabled { pointer-events: none; cursor: default; } /*** Styling for the no-auth icons ***/ [class^="no-auth-icon-"] { position: absolute; bottom: 3px; right: 3px; width: 18px; height: 18px; z-index: 98; } /*** If there is auth, unshow all icons and disable the link-disabled class ***/ body.CEAuth img[class^="no-auth-icon-"] { display: none !important; } body.CEAuth .link-disabled { pointer-events: auto; cursor: auto; } /*** If there are no extra classes tacked onto the body element, then we want to take care of the case where we do NOT have auth, just in case: ***/ body:not([class^="CENoAuth"]) img[class^="no-auth-icon-"], body:not([class^="CEAuth"]) img[class^="no-auth-icon-"] { pointer-events: auto; cursor: default; } body:not([class^="CENoAuth"]) img[class^="no-auth-icon-"]:active, body:not([class^="CEAuth"]) img[class^="no-auth-icon-"]:active { pointer-events: none; } /*** If we don't have auth: ***/ body.[class^="CENoAuth-"] .link-disabled { pointer-events: auto; cursor: default; } body.[class^="CENoAuth-"] .link-disabled:active, body.[class^="CENoAuth"] .link-disabled:focus { pointer-events: none; } /*** Styling for specific no-auth reasons ***/ body.CENoAuth-Ping .no-auth-icon-ping { display: block !important; pointer-events: auto; cursor: default; } body.CENoAuth-Ping .no-auth-icon-ping:active, body.CENoAuth-Ping .no-auth-icon-ping:focus { pointer-events: none; } body.CENoAuth-Ping .no-auth-icon-enc, body.CENoAuth-Ping .no-auth-icon-req, body.CENoAuth-Enc .no-auth-icon-opt, body.CENoAuth-Enc .no-auth-icon-org, body.CENoAuth-Enc .no-auth-icon-other { display: none !important; } body.CENoAuth-Enc .no-auth-icon-enc { display: block !important; pointer-events: auto; cursor: default; } body.CENoAuth-Enc .no-auth-icon-enc:active, body.CENoAuth-Enc .no-auth-icon-enc:focus { pointer-events: none; } body.CENoAuth-Enc .no-auth-icon-ping, body.CENoAuth-Enc .no-auth-icon-req, body.CENoAuth-Enc .no-auth-icon-opt, body.CENoAuth-Enc .no-auth-icon-org, body.CENoAuth-Enc .no-auth-icon-other { display: none !important; } body.CENoAuth-Req .no-auth-icon-req { display: block !important; pointer-events: auto; cursor: default; } body.CENoAuth-Req .no-auth-icon-req:active, body.CENoAuth-Req .no-auth-icon-req:focus { pointer-events: none; } body.CENoAuth-Req .no-auth-icon-ping, body.CENoAuth-Req .no-auth-icon-enc, body.CENoAuth-Req .no-auth-icon-opt, body.CENoAuth-Req .no-auth-icon-org, body.CENoAuth-Req .no-auth-icon-other { display: none !important; } body.CENoAuth-Opt .no-auth-icon-opt { display: block !important; pointer-events: auto; cursor: default; } body.CENoAuth-Opt .no-auth-icon-opt:active, body.CENoAuth-Opt .no-auth-icon-opt:focus { pointer-events: none; } body.CENoAuth-Opt .no-auth-icon-ping, body.CENoAuth-Opt .no-auth-icon-enc, body.CENoAuth-Opt .no-auth-icon-req, body.CENoAuth-Opt .no-auth-icon-org, body.CENoAuth-Opt .no-auth-icon-other { display: none !important; } body.CENoAuth-Org .no-auth-icon-org { display: block !important; pointer-events: auto; cursor: default; } body.CENoAuth-Org .no-auth-icon-org:active, body.CENoAuth-Org .no-auth-icon-org:focus { pointer-events: none; } body.CENoAuth-Org .no-auth-icon-ping, body.CENoAuth-Org .no-auth-icon-enc, body.CENoAuth-Org .no-auth-icon-req, body.CENoAuth-Org .no-auth-icon-opt, body.CENoAuth-Org .no-auth-icon-other { display: none !important; } body.CENoAuth-Other .no-auth-icon-other { display: block !important; pointer-events: auto; cursor: default; } body.CENoAuth-Other .no-auth-icon-other:active, body.CENoAuth-Other .no-auth-icon-other:focus { pointer-events: none; } body.CENoAuth-Other .no-auth-icon-ping, body.CENoAuth-Other .no-auth-icon-enc, body.CENoAuth-Other .no-auth-icon-req, body.CENoAuth-Other .no-auth-icon-opt, body.CENoAuth-Other .no-auth-icon-org { display: none !important; }  /*** Overrides ***/   tr.SRonly th, tr.SRonly td {     width:0;     margin:0;     padding:0;     line-height:0;     text-align:right;     top:0;     display:inline-block;     font-size:0 !important;     position:absolute !important;     left:-500px;     height:0; }   span.SRonly {     position:relative;     left:-10000px;     width:1px;     margin:0;     padding:0;     line-height:0;     text-align:right;     display:inline-block;     font-size:1px !important;     height:1px; }   caption.SRonlyCaption { position:absolute; left:-10000px; width:0; margin:0; padding:0; height:0; }    @supports not (-moz-appearance:none) { caption.SRonlyCaption { position:relative; left:-10000px; width:0; margin:0; padding:0; height:0; } }  .LeftPad{padding-left:6px;} .CE-Default caption{padding-left:6px;}  .CE-Default .CELink{     float:right;     padding-right:2px;     padding-top:10px; }      .CE-Default .FlagData, .CE-Default .FlagData *{color:#C70000 !important;font-weight:bold;}  .lightBorder {border:1px solid #BFBFBF;} .italics, .italics * {font-style:italic !important;} .CE-Default .bold, .CE-Default .bold * {font-weight:bold !important;} .CE-HSNative .bold, .CE-HSNative .bold * {font-weight: 600 !important;} .faded {color:#777;} .underline, .underline * {text-decoration:underline !important;} .strikeout, .strikeout * {text-decoration:line-through;} span.textAlignCenter, span.textAlignRight {display:inline-block;} .textAlignCenter {text-align:center;} .textAlignRight {text-align:right;padding-right:5px;} .emphasis, .emphasis * {font-variant:small-caps;} .blue {color:blue;} .CE-HSNative .DarkRoom .blue, .CE-HSNative .Carbon .blue {color:#1e90ff;} .CE-Default .highlight {background-color:yellow !important;}  .inlineBlock {display:inline-block;} .inlineIcon {display: inline-block; vertical-align: text-bottom;} .clear {clear:both;} .fl {float:left;} .unbold {font-weight:normal;} .CE-Default .Rrule {border-right:1px solid #BFBFBF;}     .dn,.printOnly {display:none;}  .breakWord{word-wrap:break-word;}  .provenanceTooltip[title]:not([title=""]):focus:after, .marTooltip[title]:not([title=""]):focus:after { content:attr(title); white-space:break-spaces; padding: 2px; display: inline-block; position: relative; text-align: left; background-color: #fef4c5; border: 1px solid #d4b943; border-radius: 2px; font-weight: normal; color: black; font-size: 10pt; line-height: 12pt; }   @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {  table.provenanceTooltip > tbody span, tr.provenanceTooltip > td span, span.provenanceTooltip, .provenanceTooltip:not(table):not(tr) span { border-bottom: 0.1rem dotted #3b434c; }  table.provenanceTooltip tr > :first-child, tr.provenanceTooltip > :first-child, .provenanceTooltip:not(span):not(tr) { padding-bottom: 3px; }  .provenanceTooltip[title]:not([title=""]):focus:after { white-space:pre; display: table; } }   @supports not (-ms-high-contrast: none) {  table.provenanceTooltip > tbody span, tr.provenanceTooltip > td span, span.provenanceTooltip, .provenanceTooltip:not(table):not(tr) span, .provenanceTooltip:focus:after { text-decoration: underline #3b434c dashed; text-decoration-thickness: 0.01rem; }  :not(tr).provenanceTooltip:focus:after { width: fit-content; }  tr.provenanceTooltip:focus:after{ width: max-content; } }   <xsl:if test="$bgColor!=''"> #document,body {background:<xsl:value-of select="$bgColor"/>} </xsl:if>   </style>      </head> <body id="document"> <div id="DocWrapper"> <xsl:attribute name="class">    CE-Default  </xsl:attribute>  <div> <xsl:attribute name="class">  </xsl:attribute>   <div id="DocHead" role="complementary"> <xsl:attribute name="class">  </xsl:attribute>  <div id="HeaderRelativeContainer"> <xsl:attribute name="class">  </xsl:attribute>      <xsl:call-template name="CardViewHeadCard"/>  </div> </div>    <div id="DocBody" role="main">        <xsl:call-template name="PatientDemographicsSection"/>     <xsl:apply-templates select="cda:component/cda:structuredBody"/>  <xsl:if test="cda:component/cda:nonXMLBody/cda:text/@mediaType='text/plain'">  <xsl:call-template name="nonXMLTextSection"/> </xsl:if>       <xsl:if test="not ($partialViewConfig='singleSection') or $sectionToLoad='patientContacts'"> <xsl:call-template name="PatientContactsSection"/> </xsl:if>   <xsl:if test="not ($partialViewConfig='singleSection') or $sectionToLoad='documentMetadata'"> <xsl:call-template name="DocumentMetadataSection"/> </xsl:if>    </div>  <xsl:if test="$lucyMyCh and $isPublic"> <xsl:call-template name="LucyCopyright"/> </xsl:if>     </div> </div> </body> </html> </xsl:template>  <xsl:template name="CardViewHeadCard">  <div class="HeadCard"> <xsl:choose> <xsl:when test="$partialViewConfig='singleSection'"> <xsl:call-template name="NavBar"/> </xsl:when> <xsl:otherwise> <xsl:call-template name="HeadCardBar"/> </xsl:otherwise> </xsl:choose> </div>  </xsl:template> <xsl:template name="NavBar">  </xsl:template> <xsl:template name="HeadCardBar">    <xsl:if test="$lucyMyCh and $isPublic and $context!='VB'"> <div class="clear"></div> <div class="textAlignCenter"> <img class="logo" alt="Personal Health Summary Logo" src="../../HTML/IMAGES/org.png"></img> </div> </xsl:if>  <h1 id="patName"> <xsl:value-of select="$patientName"/> <xsl:if test="$deceasedStatus='true'"><xsl:value-of select="$DeceasedLabel"/></xsl:if> </h1>  <div class="smaller">  <xsl:if test="$patientNames[1]/cda:given/@qualifier='IN'">  <xsl:variable name="fullName" select="$patientNames[(@use='L' or @use='OR') and cda:given[@qualifier='BR' or not(@qualifier)]][1]"/> <xsl:if test="$fullName!=''"> <xsl:call-template name="Name"> <xsl:with-param name="name" select="$fullName"/> </xsl:call-template> <br/> </xsl:if> </xsl:if>  <xsl:call-template name="DocTypeAndGenDate"/> </div> </xsl:template>          <xsl:template name="XSLSection"> <xsl:param name="id"/>  <xsl:param name="title"/>  <xsl:param name="subtitle"/>  <xsl:param name="content"/>  <xsl:param name="display"/>  <xsl:param name="colorName" select="'C'"/>  <xsl:param name="showIfEmpty"/>   <xsl:if test="$content != '' or $showIfEmpty"> <div>  <xsl:if test="$display != ''"> <xsl:attribute name="display"> <xsl:value-of select="$display"/> </xsl:attribute> </xsl:if>  <xsl:call-template name="sectionAttr"> <xsl:with-param name="id" select="$id"/> <xsl:with-param name="XSLadded" select="true()"/> </xsl:call-template>  <div> <xsl:call-template name="sectionInnerWrapperAttr"/>    <div class="sectionBody pgContent bodyC C">  <div> <xsl:call-template name="sectionHead"> <xsl:with-param name="title" select="$title"/> <xsl:with-param name="colorName" select="$colorName"/> </xsl:call-template> <xsl:copy-of select="$subtitle"/> </div>   <xsl:choose> <xsl:when test="$content != ''"> <xsl:copy-of select="$content"/> </xsl:when>  <xsl:otherwise> <div class="{$colorName}"> <span class="LeftPad inlineBlock">Not on file</span> </div> </xsl:otherwise> </xsl:choose> </div> </div> </div> </xsl:if> </xsl:template>   <xsl:template name="PatientDemographicsSection">  <xsl:variable name="patientRole" select="cda:recordTarget[1]/cda:patientRole"/> <xsl:variable name="patient" select="$patientRole/cda:patient"/>   <xsl:call-template name="XSLSection"> <xsl:with-param name="id" select="'patientDemog'"/> <xsl:with-param name="title" select="$DemogTitle"/> <xsl:with-param name="subtitle">   <xsl:text>- </xsl:text> <xsl:apply-templates select="$patient" />  </xsl:with-param> <xsl:with-param name="content">   <xsl:variable name="patRealmCode"> <xsl:call-template name="RealmCode"> <xsl:with-param name="ctxNode" select="$patient"/> </xsl:call-template> </xsl:variable>  <xsl:variable name="addrContent"> <xsl:call-template name="ValOrDefault"> <xsl:with-param name="val"> <xsl:apply-templates select="$patientRole/cda:addr"/> </xsl:with-param> </xsl:call-template> </xsl:variable>  <xsl:variable name="telecomContent"> <xsl:call-template name="ValOrDefault"> <xsl:with-param name="val"> <xsl:apply-templates select="$patientRole/cda:telecom"/> </xsl:with-param> </xsl:call-template> </xsl:variable>  <xsl:variable name="langContent"> <xsl:call-template name="ValOrDefault"> <xsl:with-param name="val"> <xsl:apply-templates select="$patient/cda:languageCommunication"/> </xsl:with-param> </xsl:call-template> </xsl:variable>  <xsl:variable name="raceEthnicityContent"> <xsl:if test="$patRealmCode = 'US' or  ($patient/cda:raceCode | $patient/sdtc:raceCode | $patient/cda:ethnicGroupCode | $patient/sdtc:ethnicGroupCode)[.//@displayName or .//cda:originalText]"> <xsl:call-template name="ValOrDefault"> <xsl:with-param name="val"> <xsl:apply-templates select="$patient/cda:raceCode | $patient/sdtc:raceCode"/> </xsl:with-param> </xsl:call-template> <xsl:text> / </xsl:text> <xsl:call-template name="ValOrDefault"> <xsl:with-param name="val"> <xsl:apply-templates select="$patient/cda:ethnicGroupCode | $patient/sdtc:ethnicGroupCode"/> </xsl:with-param> </xsl:call-template> </xsl:if> </xsl:variable>  <xsl:variable name="maritalStatusContent"> <xsl:call-template name="DisplayCode"> <xsl:with-param name="code" select="$patient/cda:maritalStatusCode"/> </xsl:call-template> </xsl:variable>   <xsl:variable name="BSNContent"> <xsl:if test="$patRealmCode = 'NL'"> <xsl:call-template name="ValOrDefault"> <xsl:with-param name="val"> <xsl:value-of select="$patientRole/cda:id[@root='2.16.840.1.113883.2.4.6.3']/@extension"/> </xsl:with-param> </xsl:call-template> </xsl:if> </xsl:variable>   <xsl:variable name="multipleBirthContent"> <xsl:if test="$patient/sdtc:multipleBirthInd"> <xsl:call-template name="DisplayBoolean"> <xsl:with-param name="bool" select="$patient/sdtc:multipleBirthInd/@value"/> </xsl:call-template> </xsl:if> </xsl:variable>  <table class="fixedTableLayout"> <caption class="SRonlyCaption"> <xsl:value-of select="$DemogTitle"/> </caption> <thead> <tr id="colsPatientDemog" class="columnHeader"> <xsl:if test="$addrContent != ''"> <th scope="col">Patient Address</th> </xsl:if> <xsl:if test="$patientName != ''"> <th scope="col">Patient Name</th> </xsl:if> <xsl:if test="$telecomContent != ''"> <th scope="col"><xsl:value-of select="$Communication"/></th> </xsl:if> </tr> </thead> <tr> <xsl:if test="$addrContent != ''"> <td> <xsl:copy-of select="$addrContent"/> </td> </xsl:if> <xsl:if test="$patientName != ''"> <td> <xsl:call-template name="ListAllNames"/> </td> </xsl:if> <xsl:if test="$telecomContent != ''"> <td> <xsl:copy-of select="$telecomContent"/> </td> </xsl:if> </tr> </table>  <br/>  <table class="fixedTableLayout"> <caption class="SRonlyCaption"> <xsl:value-of select="$DemogTitle"/> </caption> <thead> <tr id="colsPatientDemogAddl" class="columnHeader"> <xsl:if test="$langContent != ''"> <th scope="col">Language</th> </xsl:if> <xsl:if test="$raceEthnicityContent != ''"> <th scope="col">Race / Ethnicity</th> </xsl:if> <xsl:if test="$maritalStatusContent != ''"> <th scope="col">Marital Status</th> </xsl:if> <xsl:if test="$BSNContent != ''"> <th scope="col">BSN</th> </xsl:if> <xsl:if test="$multipleBirthContent != ''"> <th scope="col">Multiple Birth?</th> </xsl:if> </tr> </thead> <tr> <xsl:if test="$langContent != ''"> <td> <xsl:copy-of select="$langContent"/> </td> </xsl:if> <xsl:if test="$raceEthnicityContent != ''"> <td> <xsl:copy-of select="$raceEthnicityContent"/> </td> </xsl:if> <xsl:if test="$maritalStatusContent != ''"> <td> <xsl:copy-of select="$maritalStatusContent"/> </td> </xsl:if> <xsl:if test="$BSNContent != ''"> <td> <xsl:copy-of select="$BSNContent"/> </td> </xsl:if> <xsl:if test="$multipleBirthContent != ''"> <td> <xsl:copy-of select="$multipleBirthContent"/> </td> </xsl:if> </tr> </table>  </xsl:with-param> </xsl:call-template>  </xsl:template>   <xsl:key name="key-contacts" match="cda:guardian|cda:associatedEntity" use="concat((cda:guardianPerson|cda:associatedPerson)/cda:name,cda:addr,cda:telecom/@value,(cda:code | cda:guardianPerson/sdtc:asPatientRelationship/sdtc:code))"/> <xsl:template name="PatientContactsSection">  <xsl:call-template name="XSLSection"> <xsl:with-param name="id" select="'patientContacts'"/> <xsl:with-param name="title" select="$ContactsTitle"/> <xsl:with-param name="content">  <xsl:if test="$patientContacts">  <xsl:variable name="uniqueContacts" select="$patientContacts[count(. | key('key-contacts', concat((cda:guardianPerson|cda:associatedPerson)/cda:name,cda:addr,cda:telecom/@value,(cda:code | cda:guardianPerson/sdtc:asPatientRelationship/sdtc:code)))[1]) = 1]"/>  <table class="fixedTableLayout"> <caption class="SRonlyCaption"> <xsl:value-of select="$ContactsTitle"/> </caption> <thead> <tr id="colsPatientContacts" class="columnHeader"> <th scope="col">Contact Name</th> <th scope="col">Contact Address</th> <th scope="col"><xsl:value-of select="$Communication"/></th> <th scope="col">Relationship to Patient</th> </tr> </thead> <xsl:for-each select="$uniqueContacts"> <xsl:variable name="name" select="(cda:guardianPerson|cda:associatedPerson)/cda:name[1]"/> <tr> <xsl:attribute name="class"> <xsl:text>TableRow</xsl:text> <xsl:if test="position() mod 2 = 0"> <xsl:text> alt</xsl:text> </xsl:if> </xsl:attribute> <td> <xsl:call-template name="ValOrDefault"> <xsl:with-param name="val"> <xsl:call-template name="Name"> <xsl:with-param name="name" select="$name"/> </xsl:call-template> </xsl:with-param> </xsl:call-template> </td> <td>  <xsl:if test="not(cda:addr/@nullFlavor = 'MSK')"> <xsl:call-template name="ValOrDefault"> <xsl:with-param name="val"> <xsl:apply-templates select="cda:addr"/> </xsl:with-param> </xsl:call-template> </xsl:if> </td> <td> <xsl:if test="not(cda:telecom/@nullFlavor = 'MSK')"> <xsl:call-template name="ValOrDefault"> <xsl:with-param name="val"> <xsl:apply-templates select="cda:telecom"/> </xsl:with-param> </xsl:call-template> </xsl:if> </td> <td> <xsl:call-template name="ContactRelationships"> <xsl:with-param name="contactName" select="$name"/> <xsl:with-param name="contactAddress" select="cda:addr"/> <xsl:with-param name="contactTelecom" select="cda:telecom/@value"/> <xsl:with-param name="contactCode" select="(cda:code | cda:guardianPerson/sdtc:asPatientRelationship/sdtc:code)"/> </xsl:call-template> </td> </tr> </xsl:for-each> </table> </xsl:if> </xsl:with-param> </xsl:call-template>  </xsl:template>   <xsl:template name="ContactRelationships"> <xsl:param name="contactName"/> <xsl:param name="contactAddress"/> <xsl:param name="contactTelecom"/> <xsl:param name="contactCode"/>  <xsl:variable name="relationshipList">  <xsl:for-each select="cda:code | cda:guardianPerson/sdtc:asPatientRelationship/sdtc:code"> <xsl:variable name="code"> <xsl:call-template name="DisplayCode"> <xsl:with-param name="code" select="."/> <xsl:with-param name="noNull" select="true()"/> </xsl:call-template> </xsl:variable> <xsl:if test="$code != ''"> <xsl:value-of select="concat($code, $ListSep)"/> </xsl:if> </xsl:for-each>  <xsl:for-each select="$patientContacts[concat((cda:guardianPerson|cda:associatedPerson)/cda:name,cda:addr,cda:telecom/@value,(cda:code | cda:guardianPerson/sdtc:asPatientRelationship/sdtc:code)) = concat($contactName,$contactAddress,$contactTelecom,$contactCode)]">  <xsl:if test="not(@classCode = 'CON')"> <xsl:variable name="role"> <xsl:variable name="classCode"> <xsl:choose> <xsl:when test="@classCode"> <xsl:value-of select="@classCode" /> </xsl:when>  <xsl:when test="self::cda:guardian">GUARD</xsl:when> </xsl:choose> </xsl:variable> <xsl:call-template name="Role"> <xsl:with-param name="roleCode" select="$classCode"/> </xsl:call-template> </xsl:variable> <xsl:if test="$role != ''"> <xsl:value-of select="concat($role, $ListSep)"/> </xsl:if> </xsl:if> <xsl:variable name="role"> <xsl:call-template name="DisplayCode"> <xsl:with-param name="code" select="parent::cda:participant/cda:functionCode"/> <xsl:with-param name="noNull" select="true()"/> </xsl:call-template> </xsl:variable> <xsl:if test="$role != ''"> <xsl:value-of select="concat($role, $ListSep)"/> </xsl:if> </xsl:for-each> </xsl:variable> <xsl:call-template name="ValOrDefault"> <xsl:with-param name="val"> <xsl:call-template name="DedupList"> <xsl:with-param name="list" select="$relationshipList"/> </xsl:call-template> </xsl:with-param> </xsl:call-template> </xsl:template>       <xsl:template name="DocumentMetadataSection">  <xsl:call-template name="XSLSection"> <xsl:with-param name="id" select="'documentMetadata'"/> <xsl:with-param name="title" select="$MetadataTitle"/> <xsl:with-param name="display">block</xsl:with-param> <xsl:with-param name="content">  <xsl:call-template name="BuildProviderTable" /> <br/>   <xsl:apply-templates select="cda:custodian" mode="direct"/> <br/>   <xsl:apply-templates select="cda:componentOf/cda:encompassingEncounter" mode="direct" /> <br/>   <xsl:call-template name="LegalAuthenticatorAndInfuillmentOf" /> </xsl:with-param> </xsl:call-template>  </xsl:template>  <xsl:template name="LucyCopyright"> <div class="clear"> <br /><br /><br /> </div> <div role="complementary"> <xsl:call-template name="sectionAttr"/> <div> <xsl:call-template name="sectionInnerWrapperAttr"/> <div id="LucyThumb" class="Block">  <img alt="{$ImgUSBAlt}" src="../../HTML/IMAGES/LucyDrive.png" /> </div> <div class="Block width75"> <div id="langLucyUSB" class="smaller">If you take your Lucy record on a thumb drive to a different doctor, he or she might be able to use his computer to read the file electronically. Your downloaded, machine-readable Personal Health Summary document is in a format called "CDA." If your doctor has a computer that understands CDA, your information is a folder on your thumb drive called <b>MachineReadable_XDMFormat</b>. You might need to enter a password before your doctor can use this file.</div> </div> </div> </div>  <div class="clear smaller textAlignCenter" role="contentinfo"> <span id="langCopyright">Copyright</span> <xsl:text> &#169;</xsl:text> <xsl:call-template name="Year"> <xsl:with-param name="date" select="$docDate"/> </xsl:call-template> Epic </div> </xsl:template>   <xsl:template name="nonXMLTextSection"> <div> <xsl:call-template name="sectionAttr"> <xsl:with-param name="id">nonXMLText</xsl:with-param> </xsl:call-template> <div> <xsl:call-template name="sectionInnerWrapperAttr"/>    <div class="sectionBody pgContent">  <div> <xsl:call-template name="sectionHead"> <xsl:with-param name="title" select="$TextTitle"/> </xsl:call-template> </div>  <div class="monospace LeftPad"> <pre> <xsl:if test="cda:component/cda:nonXMLBody/cda:text/@representation='B64'"> <xsl:attribute name="ID">B64DATA</xsl:attribute> </xsl:if> <xsl:value-of select="cda:component/cda:nonXMLBody/cda:text" /> </pre> </div> </div> </div> </div> </xsl:template>   <xsl:template match="cda:custodian" mode="direct"> <table> <thead> <tr class="columnHeader"> <th> <span id="langCustodianOrg">Custodian Organization</span> </th> </tr> </thead> <tbody> <tr> <td> <xsl:call-template name="Organization"> <xsl:with-param name="org" select="cda:assignedCustodian/cda:representedCustodianOrganization"/> </xsl:call-template> </td> </tr> </tbody> </table> </xsl:template>   <xsl:template name="BuildProviderTable"> <xsl:variable name="DocDates"> <xsl:apply-templates select="cda:documentationOf/cda:serviceEvent/cda:effectiveTime" mode="direct" /> </xsl:variable> <xsl:variable name="PCP" select="(cda:documentationOf/cda:serviceEvent/cda:performer | cda:participant) [cda:functionCode[@code='PP' or @code='PCP']] [normalize-space((cda:assignedEntity/cda:assignedPerson | cda:associatedEntity/cda:associatedPerson)/cda:name)]"/> <xsl:variable name="otherProvs" select="cda:documentationOf/cda:serviceEvent/cda:performer[not(cda:functionCode[@code='PP' or @code='PCP'])]"/>   <xsl:if test="$DocDates!='' or count($PCP | $otherProvs)>0"> <table> <thead> <tr class="columnHeader"> <xsl:if test="$PCP"> <th class="noWrap"> <xsl:value-of select="$PCPLabel"/> </th> </xsl:if> <th class="noWrap widthAuto"> <xsl:choose> <xsl:when test="$PCP"> <span id="langOtherServiceProviders">Other Service Providers</span> </xsl:when> <xsl:otherwise> <span id="langServiceProviders">Service Providers</span> </xsl:otherwise> </xsl:choose> </th> <th class="noWrap width25"> <span id="langCoverageDates">Document Coverage Dates</span> </th> </tr> </thead> <tbody> <tr> <xsl:if test="$PCP"> <td> <xsl:for-each select="$PCP">  <xsl:if test="position()>1"><br/></xsl:if>  <xsl:call-template name="Performer"> <xsl:with-param name="includeDates" select="true()"/> </xsl:call-template> </xsl:for-each> </td> </xsl:if>  <td> <xsl:for-each select="$otherProvs"> <div class="ChildBlock"> <xsl:call-template name="Performer"> <xsl:with-param name="includeFunction" select="true()"/> </xsl:call-template> </div> </xsl:for-each>  </td>  <td> <xsl:copy-of select="$DocDates"/> </td> </tr> </tbody> </table> </xsl:if> </xsl:template>    <xsl:template match="cda:encompassingEncounter" mode="direct"> <table> <thead> <tr class="columnHeader"> <th class="width75"> <span id="langEncounterProviders">Encounter Providers</span> </th> <th> <span id="langEncounterDates">Encounter Date</span> </th> </tr> </thead> <tbody> <tr> <td> <xsl:for-each select="cda:encounterParticipant[not(cda:assignedEntity=preceding-sibling::cda:encounterParticipant/cda:assignedEntity)]"> <div class="ChildBlock"> <xsl:call-template name="Performer"> <xsl:with-param name="includeTypeCode" select="true()"/> </xsl:call-template> </div> </xsl:for-each> </td> <td> <xsl:apply-templates select="cda:effectiveTime" mode="direct" /> </td> </tr> </tbody> </table> </xsl:template>   <xsl:template name="LegalAuthenticatorAndInfuillmentOf"> <xsl:variable name="legalAuthPerformer"> <xsl:call-template name="Performer"> <xsl:with-param name="performer" select="cda:legalAuthenticator" /> <xsl:with-param name="includeDesc" select="true()" /> </xsl:call-template> </xsl:variable> <xsl:if test="$legalAuthPerformer != '' or cda:inFulfillmentOf[cda:order/cda:code]"> <table> <thead> <tr class="columnHeader"> <th class="width75"> <xsl:if test="$legalAuthPerformer != ''"> <span id="langLegalAuthenticator">Legal Authenticator</span> </xsl:if> </th> <th> <xsl:if test="cda:inFulfillmentOf[cda:order/cda:code]"> <span id="langOrdersFulfilled">Orders Fulfilled</span> </xsl:if> </th> </tr> </thead> <tbody> <tr> <td> <xsl:if test="$legalAuthPerformer != ''"> <xsl:copy-of select="$legalAuthPerformer" /> </xsl:if> </td> <td> <xsl:for-each select="cda:inFulfillmentOf"> <xsl:call-template name="DisplayCode"> <xsl:with-param name="code" select="cda:order/cda:code" /> </xsl:call-template> <br /> </xsl:for-each> </td> </tr> </tbody> </table> </xsl:if> </xsl:template>   <xsl:template name="Patient" match="cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient">  <xsl:variable name="realmCode"> <xsl:call-template name="RealmCode"/> </xsl:variable>     <span id="ptAge" />   <xsl:apply-templates select="cda:administrativeGenderCode" /> <xsl:if test="cda:administrativeGenderCode"> <span>; </span> </xsl:if>  <xsl:variable name="birthDate"> <xsl:call-template name="AccessibleDate"> <xsl:with-param name="date" select="cda:birthTime/@value" /> </xsl:call-template> </xsl:variable>  <xsl:choose> <xsl:when test="$birthDate!=''"> <span id="langBorn">born <xsl:copy-of select="$birthDate"/> <xsl:if test="$deceasedStatus='true' and $deceasedTime!=''">, </xsl:if> </span> </xsl:when> <xsl:otherwise> <xsl:text>DOB: </xsl:text> <xsl:value-of select="$Unknown" /> <xsl:if test="$deceasedStatus='true' and $deceasedTime!=''">, </xsl:if> </xsl:otherwise> </xsl:choose> <xsl:choose>  <xsl:when test="$deceasedStatus='true' and $deceasedTime!=''"> <span id="deceasedStatus">deceased <xsl:copy-of select="$deceasedTime"/></span> </xsl:when> <xsl:when test="$realmCode='NL' and $deceasedStatus='false'"> (alive)</xsl:when> </xsl:choose>    </xsl:template>     <xsl:template match="cda:component/cda:structuredBody">  <xsl:for-each select="cda:component"> <xsl:apply-templates select="cda:section">  </xsl:apply-templates> </xsl:for-each>  </xsl:template>    <xsl:template name="hasText"> <xsl:choose> <xsl:when test="normalize-space(cda:text/.)">1</xsl:when>     <xsl:when test="cda:text/child::*">1</xsl:when>   </xsl:choose>  <xsl:for-each select="cda:component/cda:section"> <xsl:call-template name="hasText" /> </xsl:for-each> </xsl:template>   <xsl:template name="sectionTitle"> <xsl:choose> <xsl:when test="normalize-space(cda:title/.)"><xsl:value-of select="normalize-space(cda:title/.)"/></xsl:when> <xsl:when test="cda:code"> <xsl:call-template name="DisplayCode"> <xsl:with-param name="code" select="cda:code"/> </xsl:call-template> </xsl:when> </xsl:choose> </xsl:template>   <xsl:template match="cda:section"> <xsl:param name="position" select="position()"/> <xsl:param name="sectionLinksOnly"/> <xsl:param name="sectionID"/> <xsl:param name="titlePrefix"/> <xsl:param name="sectionDepth">1</xsl:param> <xsl:variable name="hasText"> <xsl:call-template name="hasText" /> </xsl:variable> <xsl:variable name="isDisclaimer"> <xsl:value-of select="(cda:code/@code='X-DOCDATADISCLAIMER')"/> </xsl:variable> <xsl:variable name="sectionTitle"> <xsl:call-template name="sectionTitle" /> </xsl:variable> <xsl:variable name="shouldBeTruncated" select="$partialViewConfig='main' and (count(descendant::cda:tr)>$maxToShow or count(descendant::cda:item)>$maxToShow)"/> <xsl:variable name="truncatedClass"> <xsl:if test="$shouldBeTruncated"> truncated</xsl:if> </xsl:variable> <xsl:variable name="sectionPostfix"> <xsl:value-of select="substring-after($sectionID,'.')"/> </xsl:variable>  <xsl:if test="$shouldBeTruncated and $sectionLinksOnly!=1"> <div class="showHiddenBannerClass dn"></div> </xsl:if> <xsl:choose> <xsl:when test="$isDisclaimer='true'">  </xsl:when> <xsl:otherwise> <xsl:if test="not($partialViewConfig='singleSection') or  $sectionLinksOnly=1 or $sectionPostfix=$sectionToLoad"> <xsl:choose>  <xsl:when test="$hasText=''">  </xsl:when>   <xsl:when test="$sectionLinksOnly=1">  </xsl:when>   <xsl:otherwise>  <xsl:variable name="colorName"> <xsl:call-template name="ChooseSectionColor"/> </xsl:variable>  <xsl:variable name="sectionAddlClass">  </xsl:variable>   <div> <xsl:call-template name="sectionAttr"> <xsl:with-param name="id" select="$sectionID"/>  </xsl:call-template> <div> <xsl:call-template name="sectionInnerWrapperAttr"> <xsl:with-param name="sectdepth" select="$sectionDepth"/> </xsl:call-template>     <div class="sectionBody pgContent body{$colorName}">   <div class="{$truncatedClass}"> <div>  <xsl:call-template name="sectionHead"> <xsl:with-param name="id" select="cda:text/@ID"/> <xsl:with-param name="title"> <xsl:value-of select="$titlePrefix"/> <xsl:value-of select="$sectionTitle" /> </xsl:with-param> <xsl:with-param name="colorName" select="$colorName"/> </xsl:call-template>  <xsl:call-template name="SubTitle"/>    </div>   <xsl:apply-templates select="cda:text"> <xsl:with-param name="sectionTitle" select="$sectionTitle"/> <xsl:with-param name="id" select="$sectionID"/> <xsl:with-param name="colorClass" select="$colorName"/> </xsl:apply-templates>   <xsl:if test="cda:component">  <xsl:variable name="parentTitle"> <xsl:value-of select="$sectionTitle"/> <xsl:text> - </xsl:text> </xsl:variable> <xsl:for-each select="cda:component"> <xsl:apply-templates select="cda:section">  <xsl:with-param name="titlePrefix" select="concat($titlePrefix,$parentTitle)"/> <xsl:with-param name="sectionDepth" select="$sectionDepth+1"/> </xsl:apply-templates> </xsl:for-each> </xsl:if>  </div> </div> </div> </div> </xsl:otherwise> </xsl:choose> </xsl:if> </xsl:otherwise> </xsl:choose> </xsl:template>             <xsl:template match="cda:text"> <xsl:param name="sectionTitle" /> <xsl:param name="id" /> <xsl:param name="colorClass" />   <div class="{$colorClass}">   <xsl:apply-templates select="cda:caption" mode="direct"> <xsl:with-param name="padLeft" select="true()"/> </xsl:apply-templates>  <xsl:apply-templates> <xsl:with-param name="sectionTitle"> <xsl:value-of select="$sectionTitle" /> </xsl:with-param> <xsl:with-param name="id"> <xsl:value-of select="$id" /> </xsl:with-param> </xsl:apply-templates> </div> </xsl:template>  <xsl:template match="cda:text/text()"> <xsl:if test="normalize-space(.)"> <span class="inlineBlock LeftPad"> <xsl:value-of select="."/> </span> </xsl:if> </xsl:template>   <xsl:template name="SubTitle"> <xsl:variable name="oldFootnoteSubtitle"> <xsl:apply-templates select="cda:text/cda:footnote"> <xsl:with-param name="lookingForSubTitle" select="true()"/> </xsl:apply-templates> </xsl:variable>  <xsl:variable name="subTitle"> <xsl:choose>  <xsl:when test="$oldFootnoteSubtitle!=''"> <xsl:value-of select="$oldFootnoteSubtitle" /> </xsl:when>  <xsl:when test="cda:text//*[contains(@styleCode,'xSectionSubTitle')]"> <xsl:value-of select="cda:text//*[contains(@styleCode,'xSectionSubTitle')]"/> </xsl:when> </xsl:choose> </xsl:variable>    <xsl:if test="$subTitle!=''"> <span> <xsl:attribute name="class"> displayInline subTitle <xsl:text> </xsl:text>  </xsl:attribute>  <xsl:text>- </xsl:text> <xsl:value-of select="$subTitle"/> </span> </xsl:if> </xsl:template>   <xsl:template match="cda:footnote"> <xsl:param name="lookingForSubTitle" select="false()"/> <xsl:choose>  <xsl:when test="(//cda:templateId/@root='1.2.840.114350.1.72.1.51693' and parent::cda:text and count(parent::cda:text/child::cda:footnote)=1 and not(following-sibling::*)) or @styleCode='xSectionSubtitle'"> <xsl:if test="$lookingForSubTitle"> <xsl:value-of select="."/> </xsl:if> </xsl:when>  <xsl:when test="$lookingForSubTitle" /> <xsl:otherwise> <sub ID="{@ID}"> <xsl:variable name="provenanceTooltip"> <xsl:if test="$showProvenance and @ID"> <xsl:apply-templates select="@ID" mode="Provenance" /> </xsl:if> </xsl:variable> <xsl:if test="$provenanceTooltip!=''"> <xsl:attribute name="title"> <xsl:value-of select="$provenanceTooltip"/> </xsl:attribute> <xsl:attribute name="tabindex"> <xsl:value-of select="0"/> </xsl:attribute> </xsl:if> <xsl:variable name="class"> <xsl:if test="parent::cda:text">LeftPad </xsl:if> <xsl:if test="$provenanceTooltip!=''">provenanceTooltip </xsl:if> </xsl:variable> <xsl:if test="$class!=''"> <xsl:attribute name="class"><xsl:value-of select="$class"/></xsl:attribute> </xsl:if> <xsl:choose> <xsl:when test="$provenanceTooltip!=''"> <span> <xsl:apply-templates/> </span> </xsl:when> <xsl:otherwise> <xsl:apply-templates/> </xsl:otherwise> </xsl:choose>  </sub> </xsl:otherwise> </xsl:choose> </xsl:template>  <xsl:template match="cda:footnoteRef"> <xsl:variable name="target"> <xsl:choose> <xsl:when test="@IDREF=''"/> <xsl:when test="@IDREF='#'"/> <xsl:when test="starts-with(@IDREF,'#')"> <xsl:value-of select="substring(@IDREF,2)"/> </xsl:when> <xsl:otherwise> <xsl:value-of select="@IDREF"/> </xsl:otherwise> </xsl:choose> </xsl:variable>   <xsl:if test="$target!='' and //cda:footnote[@ID=$target]"> <xsl:apply-templates select="//cda:footnote[@ID=$target]" /> </xsl:if> </xsl:template>   <xsl:template match="cda:list"> <xsl:param name="sectionTitle" /> <xsl:param name="id" />   <xsl:variable name="embeded" select="not(parent::cda:text)"/>     <xsl:apply-templates select="cda:caption" mode="direct"> <xsl:with-param name="padLeft" select="true()"/> </xsl:apply-templates>  <xsl:variable name="shouldBeTruncated" select="count(cda:item)>$maxToShow  and $partialViewConfig='main'"/>     <div>  <xsl:variable name="provenanceTooltip"> <xsl:if test="$showProvenance and @ID"> <xsl:apply-templates select="@ID" mode="Provenance" /> </xsl:if> </xsl:variable>   <xsl:call-template name="AddStyleCodeClass"> <xsl:with-param name="addOnClass"><xsl:if test="$provenanceTooltip!=''">provenanceTooltip</xsl:if></xsl:with-param> </xsl:call-template>   <xsl:if test="@ID"> <xsl:attribute name="id"> <xsl:value-of select="@ID"/> </xsl:attribute> <xsl:if test="$provenanceTooltip!=''"> <xsl:attribute name="title"> <xsl:value-of select="$provenanceTooltip"/> </xsl:attribute> <xsl:attribute name="tabindex"> <xsl:value-of select="0"/> </xsl:attribute> </xsl:if> </xsl:if>  <xsl:for-each select="cda:item"> <xsl:if test="not($shouldBeTruncated) or (not(position()>$maxToShow))"> <div>  <xsl:variable name="provenanceTooltipItem"> <xsl:if test="$showProvenance and @ID"> <xsl:apply-templates select="@ID" mode="Provenance" /> </xsl:if> </xsl:variable>   <xsl:call-template name="AddStyleCodeClass"> <xsl:with-param name="addOnClass"> <xsl:text>Item pgSection</xsl:text>  <xsl:if test="not($embeded)"> ListRow</xsl:if>  <xsl:if test="not($embeded)"> LeftPad</xsl:if> <xsl:if test="$provenanceTooltipItem!=''"> provenanceTooltip</xsl:if> </xsl:with-param> </xsl:call-template>    <xsl:if test="@ID">  <xsl:if test="$provenanceTooltipItem!=''"> <xsl:attribute name="title"> <xsl:value-of select="$provenanceTooltipItem"/> </xsl:attribute> <xsl:attribute name="tabindex"> <xsl:value-of select="0"/> </xsl:attribute> </xsl:if> <a name="{@ID}" id="{@ID}"/> </xsl:if>  <xsl:if test="../@listType='ordered'"><xsl:value-of select="position()"/>. </xsl:if> <xsl:if test="../@listType='unordered'">&#8226; </xsl:if>   <xsl:if test="cda:caption">  <xsl:if test="cda:caption/following-sibling::cda:table and cda:caption/../preceding-sibling::*"><br/><br/></xsl:if> <div class="sectionHeader"> <xsl:apply-templates select="cda:caption" mode="direct" /> </div> </xsl:if>  <span>   <xsl:apply-templates>  <xsl:with-param name="sectionTitle" select="$sectionTitle" />  <xsl:with-param name="captioncol"> <xsl:if test="cda:caption/following-sibling::cda:table"> <xsl:value-of select="cda:caption"/> </xsl:if> </xsl:with-param> </xsl:apply-templates>     </span> </div> </xsl:if> </xsl:for-each> </div> </xsl:template>       <xsl:template match="cda:table"> <xsl:param name="sectionTitle" /> <xsl:param name="id" /> <xsl:param name="captioncol" />  <xsl:variable name="embeded" select="ancestor::cda:table" />  <xsl:variable name="isAdmTable" select="contains(@ID,'admMedTable')" />  <xsl:variable name="provenanceTooltip"> <xsl:if test="$showProvenance and @ID"> <xsl:apply-templates select="@ID" mode="Provenance" /> </xsl:if> </xsl:variable>   <table> <xsl:if test="@ID"> <xsl:attribute name="id"> <xsl:value-of select="@ID"/> </xsl:attribute> <xsl:if test="$provenanceTooltip!=''"> <xsl:attribute name="title"> <xsl:value-of select="$provenanceTooltip"/> </xsl:attribute> <xsl:attribute name="tabindex"> <xsl:value-of select="0"/> </xsl:attribute> </xsl:if> </xsl:if> <xsl:call-template name="AddStyleCodeClass"> <xsl:with-param name="addOnClass"> <xsl:if test="$embeded">lightBorder</xsl:if> <xsl:if test="$isAdmTable"> screenOnly</xsl:if> <xsl:if test="$provenanceTooltip!=''"> provenanceTooltip</xsl:if> </xsl:with-param> </xsl:call-template> <caption class="SRonlyCaption"> <xsl:choose> <xsl:when test="@summary"><xsl:value-of select="@summary"/></xsl:when> <xsl:otherwise> <xsl:value-of select="$sectionTitle"/> <xsl:if test="$captioncol"> <xsl:text> - </xsl:text> <xsl:value-of select="$captioncol"/> </xsl:if> <xsl:if test="cda:caption and not(cda:caption=$captioncol)"> <xsl:text> - </xsl:text> <xsl:value-of select="cda:caption"/> </xsl:if> </xsl:otherwise> </xsl:choose> </caption>   <xsl:apply-templates select="cda:caption" mode="underTable"/>   <xsl:apply-templates /> </table>  <xsl:if test="$isAdmTable"> <xsl:call-template name="admMedPrintTable"> <xsl:with-param name="captioncol" select="$captioncol" /> </xsl:call-template> </xsl:if>  <xsl:choose> <xsl:when test="following-sibling::cda:table"> <br/> </xsl:when> </xsl:choose> </xsl:template>   <xsl:template name="admMedPrintTable"> <xsl:param name="captioncol" />  <table> <xsl:call-template name="AddStyleCodeClass"> <xsl:with-param name="addOnClass"> <xsl:text>printOnly</xsl:text> </xsl:with-param> </xsl:call-template>   <xsl:apply-templates select="cda:caption" mode="underTable"/>  <xsl:apply-templates select="cda:colgroup" />  <xsl:apply-templates select="cda:thead" />  <tbody>  <xsl:apply-templates select="cda:tbody/cda:tr[1]" mode="admMedTable" /> </tbody>  <xsl:apply-templates select="cda:tfoot" /> </table> </xsl:template>    <xsl:template match="cda:tr" mode="admMedTable"> <xsl:param name="max" /> <xsl:param name="count" />  <xsl:choose>  <xsl:when test="contains(@styleCode,'medRow')"> <xsl:variable name="rowspan">  <xsl:variable name="child" select="child::cda:td[1]" /> <xsl:choose> <xsl:when test="$child/@rowspan"><xsl:value-of select="$child/@rowspan"/></xsl:when> <xsl:otherwise><xsl:value-of select="number(1)"/></xsl:otherwise> </xsl:choose>  </xsl:variable> <tr>  <xsl:variable name="trClass"> <xsl:choose> <xsl:when test="contains(translate(@styleCode,$ucletters,$lcletters),'altrow')">alt </xsl:when> <xsl:when test="contains(translate(@styleCode,$ucletters,$lcletters),'rowalt')">alt </xsl:when> <xsl:when test="contains(translate(@styleCode,$ucletters,$lcletters),'normrow')"/> <xsl:when test="contains(translate(@styleCode,$ucletters,$lcletters),'rownormal')"/> <xsl:when test="(position() mod 2 = 0)">alt </xsl:when> </xsl:choose> <xsl:if test="contains(@styleCode,'historical')">historical hlt-1 </xsl:if> <xsl:if test="@styleCode"> <xsl:variable name="styleCodeClass"> <xsl:call-template name="StyleCodeClass"> <xsl:with-param name="styleCode" select="@styleCode" /> </xsl:call-template> </xsl:variable> <xsl:if test="$styleCodeClass!=''"> <xsl:value-of select="$styleCodeClass"/> <xsl:text> </xsl:text> </xsl:if> </xsl:if> </xsl:variable> <xsl:if test="$trClass!=''"> <xsl:attribute name="class"> <xsl:value-of select="$trClass"/> </xsl:attribute> </xsl:if>   <xsl:apply-templates select="cda:td[1]" mode="admMedTable"/>   <td colspan="5"> <table> <colgroup> <col span="5" class="width20"/> </colgroup> <tbody>  <tr> <xsl:apply-templates select="cda:td[position() > 1]" mode="admMedTable"> <xsl:with-param name="addOnClass">innerTd</xsl:with-param> </xsl:apply-templates> </tr>   <xsl:if test="$rowspan &gt; 1"> <xsl:apply-templates select="following-sibling::cda:tr[1]" mode="admMedTable"> <xsl:with-param name="max" select="$rowspan" /> <xsl:with-param name="count" select="2"></xsl:with-param> </xsl:apply-templates> </xsl:if> </tbody> </table> </td> </tr>   <xsl:apply-templates select="following-sibling::cda:tr[number($rowspan)]" />   <xsl:apply-templates select="following-sibling::cda:tr[$rowspan+1]" mode="admMedTable"></xsl:apply-templates>  </xsl:when>  <xsl:when test="contains(@styleCode,'admRow')"> <tr> <xsl:apply-templates select="cda:td" mode="admMedTable"> <xsl:with-param name="addOnClass">innerTd</xsl:with-param> </xsl:apply-templates> </tr>   <xsl:if test="number($count) &lt; number($max)"> <xsl:apply-templates select="following-sibling::cda:tr[1]" mode="admMedTable"> <xsl:with-param name="max" select="$max" /> <xsl:with-param name="count" select="$count + 1" /> </xsl:apply-templates> </xsl:if> </xsl:when>  <xsl:when test="contains(@styleCode,'endTable')"> <xsl:apply-templates select="self::cda:tr[1]" /> </xsl:when> </xsl:choose> </xsl:template>   <xsl:template match="cda:td" mode="admMedTable"> <xsl:param name="addOnClass" /> <td> <xsl:if test="@* or $addOnClass!=''">  <xsl:if test="@colspan"><xsl:attribute name="colspan"><xsl:value-of select="@colspan"/></xsl:attribute></xsl:if>  <xsl:if test="@abbr"><xsl:attribute name="abbr"><xsl:value-of select="@abbr"/></xsl:attribute></xsl:if> <xsl:if test="@scope"><xsl:attribute name="scope"><xsl:value-of select="@scope"/></xsl:attribute></xsl:if> <xsl:if test="@align"><xsl:attribute name="align"><xsl:value-of select="@align"/></xsl:attribute></xsl:if>  <xsl:call-template name="AddStyleCodeClass"> <xsl:with-param name="addOnClass" select="$addOnClass" /> </xsl:call-template> </xsl:if>   <xsl:apply-templates select="cda:caption" mode="direct"> <xsl:with-param name="padLeft" select="true()" /> </xsl:apply-templates>   <xsl:apply-templates/>  <xsl:call-template name="nbs" /> </td> </xsl:template>   <xsl:template match="cda:colgroup"> <colgroup> <xsl:call-template name="AddStyleCodeClass" /> <xsl:if test="@ID"> <xsl:attribute name="id"> <xsl:value-of select="@ID"/> </xsl:attribute> </xsl:if>  <xsl:apply-templates select="cda:col"/> </colgroup> </xsl:template>  <xsl:template match="cda:col"> <col> <xsl:if test="@width"> <xsl:attribute name="width"> <xsl:value-of select="@width"/> </xsl:attribute> </xsl:if> <xsl:if test="@span"> <xsl:attribute name="span"> <xsl:value-of select="@span"/> </xsl:attribute> </xsl:if>  <xsl:if test="@styleCode!=''"> <xsl:call-template name="AddStyleCodeClass" /> </xsl:if>  <xsl:if test="@ID"> <xsl:attribute name="id"> <xsl:value-of select="@ID"/> </xsl:attribute> </xsl:if> </col> </xsl:template>   <xsl:template match="cda:thead | cda:tbody | cda:tfoot"> <xsl:element name="{name()}"> <xsl:variable name="provenanceTooltip"> <xsl:if test="$showProvenance and @ID"> <xsl:apply-templates select="@ID" mode="Provenance" /> </xsl:if> </xsl:variable> <xsl:call-template name="AddStyleCodeClass"> <xsl:with-param name="addOnClass"><xsl:if test="$provenanceTooltip!=''">provenanceTooltip </xsl:if></xsl:with-param> </xsl:call-template> <xsl:if test="@ID"> <xsl:attribute name="id"> <xsl:value-of select="@ID"/> </xsl:attribute> <xsl:if test="$provenanceTooltip!=''"> <xsl:attribute name="title"> <xsl:value-of select="$provenanceTooltip"/> </xsl:attribute> <xsl:attribute name="tabindex"> <xsl:value-of select="0"/> </xsl:attribute> </xsl:if> </xsl:if>   <xsl:apply-templates select="cda:tr"/> </xsl:element> </xsl:template>   <xsl:template match="cda:tr"> <xsl:variable name="styleCodeLC" select="translate(@styleCode,$ucletters,$lcletters)"/> <xsl:if test="not(position()>$maxToShow) or not($partialViewConfig='main')"> <tr> <xsl:variable name="provenanceTooltip"> <xsl:if test="$showProvenance and @ID"> <xsl:apply-templates select="@ID" mode="Provenance" /> </xsl:if> </xsl:variable> <xsl:variable name="class"> <xsl:choose> <xsl:when test="contains($styleCodeLC,'altrow')">alt </xsl:when> <xsl:when test="contains($styleCodeLC,'rowalt')">alt </xsl:when> <xsl:when test="contains($styleCodeLC,'normrow')"/> <xsl:when test="contains($styleCodeLC,'rownormal')"/> <xsl:when test="(position() mod 2 = 0)">alt </xsl:when> </xsl:choose> <xsl:if test="$provenanceTooltip!=''">provenanceTooltip </xsl:if> <xsl:if test="contains($styleCodeLC,'historical')">historical hlt-1 </xsl:if>  <xsl:if test="@styleCode"> <xsl:variable name="styleCodeClass"> <xsl:call-template name="StyleCodeClass"> <xsl:with-param name="styleCode" select="@styleCode" /> </xsl:call-template> </xsl:variable> <xsl:if test="$styleCodeClass!=''"> <xsl:value-of select="$styleCodeClass"/> <xsl:text> </xsl:text> </xsl:if> </xsl:if>  <xsl:if test="parent::cda:thead"> <xsl:text>columnHeader </xsl:text> </xsl:if> <xsl:choose>  <xsl:when test="parent::cda:thead" />   <xsl:when test="not(preceding-sibling::*) and not(name(../preceding-sibling::*[1])='tbody')"/>   <xsl:when test="contains($styleCodeLC,'mergeup')"/> <xsl:otherwise>trRowLines TableRow </xsl:otherwise> </xsl:choose> </xsl:variable> <xsl:if test="$class!=''"> <xsl:attribute name="class"> <xsl:value-of select="$class"/> </xsl:attribute> </xsl:if> <xsl:if test="@ID"> <xsl:attribute name="id"> <xsl:value-of select="@ID"/> </xsl:attribute> <xsl:if test="$provenanceTooltip!=''"> <xsl:attribute name="title"> <xsl:value-of select="$provenanceTooltip"/> </xsl:attribute> <xsl:attribute name="tabindex"> <xsl:value-of select="0"/> </xsl:attribute> </xsl:if> </xsl:if>  <xsl:apply-templates/> </tr> </xsl:if> </xsl:template>   <xsl:template name="nbs"> <xsl:choose> <xsl:when test="normalize-space(.)" />    <xsl:when test="count(child::*)=count(child::cda:content)">    <xsl:choose> <xsl:when test="normalize-space(child::cda:content/.)" />   <xsl:otherwise>&#160;</xsl:otherwise>             </xsl:choose> </xsl:when> <xsl:when test="count(child::*)>0" />   <xsl:otherwise><xsl:text>&#160;</xsl:text></xsl:otherwise> </xsl:choose> </xsl:template>   <xsl:template match="cda:td | cda:th">  <xsl:variable name="positionIndex" select="position()"/> <xsl:variable name="elementName"> <xsl:choose> <xsl:when test="name(../..)='thead'">th</xsl:when> <xsl:otherwise>td</xsl:otherwise> </xsl:choose> </xsl:variable> <xsl:element name="{$elementName}"> <xsl:if test="@*"> <xsl:variable name="provenanceTooltip"> <xsl:if test="$showProvenance and @ID"> <xsl:apply-templates select="@ID" mode="Provenance" /> </xsl:if> </xsl:variable>  <xsl:if test="@colspan"><xsl:attribute name="colspan"><xsl:value-of select="@colspan"/></xsl:attribute></xsl:if> <xsl:if test="@rowspan"><xsl:attribute name="rowspan"><xsl:value-of select="@rowspan"/></xsl:attribute></xsl:if> <xsl:if test="@abbr"><xsl:attribute name="abbr"><xsl:value-of select="@abbr"/></xsl:attribute></xsl:if> <xsl:if test="@scope"><xsl:attribute name="scope"><xsl:value-of select="@scope"/></xsl:attribute></xsl:if> <xsl:if test="@align"><xsl:attribute name="align"><xsl:value-of select="@align"/></xsl:attribute></xsl:if>  <xsl:call-template name="AddStyleCodeClass"> <xsl:with-param name="addOnClass"><xsl:if test="$provenanceTooltip!=''">provenanceTooltip</xsl:if></xsl:with-param> </xsl:call-template> <xsl:if test="@ID"> <xsl:attribute name="id"> <xsl:value-of select="@ID"/> </xsl:attribute> <xsl:if test="$provenanceTooltip!=''"> <xsl:attribute name="title"> <xsl:value-of select="$provenanceTooltip"/> </xsl:attribute> <xsl:attribute name="tabindex"> <xsl:value-of select="0"/> </xsl:attribute> </xsl:if> </xsl:if> </xsl:if>  <xsl:apply-templates select="cda:caption" mode="direct"> <xsl:with-param name="padLeft" select="true()" /> </xsl:apply-templates>   <xsl:choose> <xsl:when test="$showProvenance and name(.)='td'"> <span> <xsl:apply-templates/> </span> </xsl:when> <xsl:otherwise> <xsl:apply-templates/> </xsl:otherwise> </xsl:choose>   <xsl:call-template name="nbs" /> </xsl:element> </xsl:template>   <xsl:template match="cda:content"> <xsl:variable name="underText" select="parent::cda:text" /> <xsl:variable name="href">  </xsl:variable>  <xsl:variable name="getStandardTooltip" select="not($isPublic) and @styleCode!='' and contains(@styleCode,'xTooltip')" /> <xsl:variable name="provenanceTooltip"> <xsl:if test="$showProvenance and @ID"> <xsl:apply-templates select="@ID" mode="Provenance" /> </xsl:if> </xsl:variable>  <xsl:variable name="tooltip">  <xsl:value-of select="$provenanceTooltip"/> </xsl:variable>  <xsl:if test="translate(@styleCode,$ucletters,$lcletters)='xhr'"><hr /></xsl:if>  <xsl:variable name="contentElementWrapper"> <xsl:choose> <xsl:when test="$href!=''">a</xsl:when> <xsl:when test="contains(@styleCode,'mar') and $tooltip!=''">li</xsl:when> <xsl:otherwise>span</xsl:otherwise> </xsl:choose> </xsl:variable>  <xsl:element name="{$contentElementWrapper}"> <xsl:call-template name="AddStyleCodeClass"> <xsl:with-param name="addOnClass"> <xsl:if test="$underText">LeftPad inlineBlock </xsl:if> <xsl:if test="@emphasis='bold'">bold </xsl:if> <xsl:if test="@emphasis='underline'">underline </xsl:if> <xsl:if test="@emphasis='italics'">italics </xsl:if> <xsl:if test="@emphasis='yes'">italics </xsl:if> <xsl:if test="@revised='delete'">dn </xsl:if> <xsl:if test="$provenanceTooltip!=''">provenanceTooltip </xsl:if> </xsl:with-param> </xsl:call-template> <xsl:if test="@ID"> <xsl:attribute name="id"> <xsl:value-of select="@ID"/> </xsl:attribute> </xsl:if>  <!--Tooltip is set with public context taken into consideration above --> <xsl:if test="$tooltip!=''"> <xsl:attribute name="title"> <xsl:value-of select="$tooltip"/> </xsl:attribute> <xsl:attribute name="tabindex"> <xsl:value-of select="0"/> </xsl:attribute> </xsl:if>     <xsl:if test="$provenanceTooltip!=''"> <xsl:attribute name="tabindex"> <xsl:value-of select="0"/> </xsl:attribute> </xsl:if>  <xsl:apply-templates />   </xsl:element> </xsl:template>     <xsl:template name="sectionAttr"> <xsl:param name="id"/> <xsl:param name="XSLadded" select="false()"/> <xsl:param name="hiddenSection" select="false()"/> <xsl:param name="printOnly" select="false()"/>     <xsl:attribute name="class">Section<xsl:if  test="$XSLadded"><xsl:text> XSLadded</xsl:text></xsl:if><xsl:if  test="$hiddenSection"><xsl:text> dn</xsl:text></xsl:if><xsl:if  test="$printOnly"><xsl:text> printOnly</xsl:text></xsl:if></xsl:attribute>  </xsl:template>   <xsl:template name="sectionInnerWrapperAttr"> <xsl:param name="sectdepth">1</xsl:param> <xsl:attribute name="class">  </xsl:attribute>  </xsl:template>   <xsl:template name="sectionHead"> <xsl:param name="id"/> <xsl:param name="title"/> <xsl:param name="colorName"/> <xsl:param name="subTitle"/>  <xsl:if test="$id"> <xsl:attribute name="id"> <xsl:value-of select="$id"/> </xsl:attribute> </xsl:if>  <xsl:attribute name="class"> sectionHead <xsl:text> </xsl:text>  <xsl:text> </xsl:text> <xsl:if test="$colorName">head<xsl:value-of select="$colorName"/></xsl:if> </xsl:attribute>   <h2>  <xsl:value-of select="$title"/> </h2>   <xsl:if test="$subTitle!=''"> <span class="subTitle subtitle hlt1 displayInline"> <xsl:text> - </xsl:text> <xsl:value-of select="$subTitle"/> </span> </xsl:if>   </xsl:template>     <xsl:template match="cda:br"> <br/> </xsl:template>   <xsl:template match="cda:paragraph">  <xsl:variable name="underText" select="parent::cda:text or ($lucyMyCh and parent::cda:item)" />   <xsl:apply-templates select="cda:caption" mode="direct"> <xsl:with-param name="padLeft" select="$underText" /> </xsl:apply-templates>  <xsl:variable name="provenanceTooltip"> <xsl:if test="$showProvenance and @ID"> <xsl:apply-templates select="@ID" mode="Provenance" /> </xsl:if> </xsl:variable>  <div> <xsl:if test="@ID"> <xsl:attribute name="id"> <xsl:value-of select="@ID"/> </xsl:attribute> <xsl:if test="$provenanceTooltip!=''"> <xsl:attribute name="title"> <xsl:value-of select="$provenanceTooltip"/> </xsl:attribute> <xsl:attribute name="tabindex"> <xsl:value-of select="0"/> </xsl:attribute> </xsl:if> </xsl:if> <xsl:variable name="class"> <xsl:if test="$underText">LeftPad </xsl:if> <xsl:if test="$provenanceTooltip!=''">provenanceTooltip </xsl:if> </xsl:variable> <xsl:if test="$class!=''"> <xsl:attribute name="class"> <xsl:value-of select="$class"/> </xsl:attribute> </xsl:if> <div> <xsl:if test="@styleCode!=''"> <xsl:call-template name="AddStyleCodeClass" /> </xsl:if> <xsl:choose> <xsl:when test="$showProvenance"> <span> <xsl:apply-templates/>&#160; </span> </xsl:when> <xsl:otherwise> <xsl:apply-templates/>&#160; </xsl:otherwise> </xsl:choose> </div> </div> </xsl:template>   <xsl:template match="cda:sup | cda:sub"> <xsl:element name="{local-name(.)}"> <xsl:if test="parent::cda:text"> <xsl:attribute name="class">LeftPad</xsl:attribute> </xsl:if> <xsl:apply-templates/> </xsl:element> </xsl:template>   <xsl:template match="cda:caption" mode="direct"> <xsl:param name="padLeft" /> <xsl:variable name="provenanceTooltip"> <xsl:if test="$showProvenance and @ID"> <xsl:apply-templates select="@ID" mode="Provenance" /> </xsl:if> </xsl:variable>  <div> <xsl:if test="@ID"> <xsl:attribute name="id"> <xsl:value-of select="@ID"/> </xsl:attribute> <xsl:if test="$provenanceTooltip!=''"> <xsl:attribute name="title"> <xsl:value-of select="$provenanceTooltip"/> </xsl:attribute> <xsl:attribute name="tabindex"> <xsl:value-of select="0"/> </xsl:attribute> </xsl:if> </xsl:if> <span> <xsl:call-template name="AddStyleCodeClass"> <xsl:with-param name="addOnClass"> <xsl:if test="$padLeft"> <xsl:text>LeftPad </xsl:text> </xsl:if> <xsl:text>tableCaption </xsl:text> <xsl:if test="$provenanceTooltip!=''">provenanceTooltip </xsl:if> </xsl:with-param> </xsl:call-template> <xsl:apply-templates /> </span> </div> </xsl:template>   <xsl:template match="cda:caption" mode="underTable"> <caption class="tableCaption"> <xsl:apply-templates select="." mode="direct"/> </caption> </xsl:template>   <xsl:template match="cda:caption" />   <xsl:template match="cda:linkHtml">   <xsl:if test="$isPublic=1"> <xsl:call-template name="AddNonLink" /> </xsl:if>    </xsl:template>   <xsl:template name="AddNonLink" > <xsl:variable name="provenanceTooltip"> <xsl:if test="$showProvenance and @ID"> <xsl:apply-templates select="@ID" mode="Provenance" /> </xsl:if> </xsl:variable> <xsl:variable name="titleWithProvenance"> <xsl:value-of select="@title" /> <xsl:if test="$provenanceTooltip!=''"> <xsl:text>&#10;</xsl:text> <xsl:value-of select="$provenanceTooltip"/> </xsl:if> </xsl:variable> <span name="{@name}" id="{@ID}" title="{$titleWithProvenance}"> <xsl:call-template name="AddStyleCodeClass"> <xsl:with-param name="addOnClass"> <xsl:if test="parent::cda:text">LeftPad </xsl:if> <xsl:if test="$provenanceTooltip!=''">provenanceTooltip </xsl:if> </xsl:with-param> </xsl:call-template> <xsl:if test="$provenanceTooltip!=''"> <xsl:attribute name="tabindex"> <xsl:value-of select="0"/> </xsl:attribute> </xsl:if> <xsl:apply-templates/> <xsl:if test="@href != text()"> <xsl:text> (Link: </xsl:text> <xsl:value-of select="@href"/> <xsl:text>)</xsl:text> </xsl:if> </span> </xsl:template>     <xsl:template match="cda:renderMultiMedia"> <xsl:variable name="imageRef" select="@referencedObject"/> <xsl:choose> <xsl:when test="//cda:regionOfInterest[@ID=$imageRef]"> <xsl:call-template name="AddImage"> <xsl:with-param name="image-uri" select="//cda:regionOfInterest[@ID=$imageRef]//cda:observationMedia/cda:value/cda:reference/@value"/> <xsl:with-param name="caption" select="cda:caption"/> </xsl:call-template> </xsl:when> <xsl:when test="//cda:observationMedia[@ID=$imageRef]"> <xsl:call-template name="AddImage"> <xsl:with-param name="image-uri" select="//cda:observationMedia[@ID=$imageRef]/cda:value/cda:reference/@value" /> <xsl:with-param name="caption" select="cda:caption"/> </xsl:call-template> </xsl:when> </xsl:choose> </xsl:template>  <xsl:template name="AddImage"> <xsl:param name="image-uri" /> <xsl:param name="caption"/> <xsl:variable name="provenanceTooltip"> <xsl:if test="$showProvenance and @ID"> <xsl:apply-templates select="@ID" mode="Provenance" /> </xsl:if> </xsl:variable> <xsl:variable name="captionWithProvenance"> <xsl:value-of select="$caption" /> <xsl:if test="$provenanceTooltip!=''"> <xsl:if test="$caption!=''"><xsl:text>&#10;</xsl:text></xsl:if> <xsl:value-of select="$provenanceTooltip"/> </xsl:if> </xsl:variable> <xsl:choose> <xsl:when test="starts-with($image-uri,'data:image/png') or starts-with($image-uri,'data:image/gif') or starts-with($image-uri,'data:image/jpeg')"> <span> <xsl:if test="$provenanceTooltip!=''"> <xsl:attribute name="title"> <xsl:value-of select="$provenanceTooltip"/> </xsl:attribute> <xsl:attribute name="class"> <xsl:text>provenanceTooltip </xsl:text> </xsl:attribute> <xsl:attribute name="tabindex"> <xsl:value-of select="0"/> </xsl:attribute> </xsl:if> <img src="{$image-uri}" title="{$captionWithProvenance}" alt="{$caption}" /> </span> </xsl:when> <xsl:when test="contains($image-uri,'://') or starts-with($image-uri,'\\')"> <span> <xsl:attribute name="class"> <xsl:text>italics </xsl:text> <xsl:if test="$provenanceTooltip!=''">provenanceTooltip </xsl:if> </xsl:attribute> <xsl:if test="$provenanceTooltip!=''"> <xsl:attribute name="title"> <xsl:value-of select="$provenanceTooltip"/> </xsl:attribute> <xsl:attribute name="tabindex"> <xsl:value-of select="0"/> </xsl:attribute> </xsl:if> <xsl:text>External Multimedia: </xsl:text> <xsl:value-of select="$image-uri"/> <xsl:if test="$caption!=''"> <xsl:text> (</xsl:text> <xsl:value-of select="$caption"/> <xsl:text>)</xsl:text> </xsl:if> </span> </xsl:when> <xsl:otherwise> <span> <xsl:attribute name="class"> <xsl:text>FlagData </xsl:text> <xsl:if test="$provenanceTooltip!=''">provenanceTooltip </xsl:if> </xsl:attribute> <xsl:if test="$provenanceTooltip!=''"> <xsl:attribute name="title"> <xsl:value-of select="$provenanceTooltip"/> </xsl:attribute> <xsl:attribute name="tabindex"> <xsl:value-of select="0"/> </xsl:attribute> </xsl:if> <xsl:text>Unsupported Multimedia</xsl:text> <xsl:if test="$caption!=''"> <xsl:text> (</xsl:text> <xsl:value-of select="$caption"/> <xsl:text>)</xsl:text> </xsl:if> </span> </xsl:otherwise> </xsl:choose> </xsl:template>    <xsl:template name="AddStyleCodeClass"> <xsl:param name="addOnClass" />  <xsl:variable name="styleCode"> <xsl:if test="@styleCode"> <xsl:call-template name="StyleCodeClass"> <xsl:with-param name="styleCode" select="@styleCode" /> </xsl:call-template> </xsl:if> </xsl:variable>  <xsl:if test="$styleCode!='' or $addOnClass!=''"> <xsl:attribute name="class"> <xsl:if test="$styleCode"><xsl:value-of select="$styleCode"/></xsl:if> <xsl:if test="$styleCode!='' and $addOnClass!=''"><xsl:text> </xsl:text></xsl:if> <xsl:if test="$addOnClass"><xsl:value-of select="$addOnClass"/></xsl:if> </xsl:attribute> </xsl:if> </xsl:template>    <xsl:template name="StyleCodeClass"> <xsl:param name="styleCode" />  <xsl:variable name="styleCodeLC" select="translate($styleCode,$ucletters,$lcletters)"/> <xsl:choose>  <xsl:when test="contains($styleCode,' ')">  <xsl:variable name="normalizedStyleCodeClasses">  <xsl:call-template name="StyleCodeClass"> <xsl:with-param name="styleCode" select="substring-before($styleCode,' ')" /> </xsl:call-template>  <xsl:text> </xsl:text>  <xsl:call-template name="StyleCodeClass"> <xsl:with-param name="styleCode" select="substring-after($styleCode,' ')" /> </xsl:call-template> </xsl:variable>  <xsl:value-of select="normalize-space($normalizedStyleCodeClasses)"/> </xsl:when>  <xsl:when test="starts-with($styleCode, 'x')"> <xsl:call-template name="StyleCodeClass"> <xsl:with-param name="styleCode" select="substring($styleCode,2)"/> </xsl:call-template> </xsl:when>  <xsl:otherwise>  <xsl:if test="contains($styleCodeLC,'bold')">bold </xsl:if> <xsl:if test="contains($styleCodeLC,'underline')">underline </xsl:if> <xsl:if test="contains($styleCodeLC,'italics')">italics </xsl:if> <xsl:choose>   <xsl:when test="$styleCodeLC='pre' or $styleCodeLC='monospace' or $styleCodeLC='mono'">monospace</xsl:when> <xsl:when test="$styleCodeLC='flagdata' or $styleCodeLC='alert' or $styleCodeLC='abnormal'">FlagData hlt2</xsl:when> <xsl:when test="$styleCodeLC='secondarytext'">secondaryText</xsl:when> <xsl:when test="$styleCodeLC='cellheader' or $styleCodeLC='label'">cellHeader hlt-1</xsl:when> <xsl:when test="$styleCodeLC='header'">bold</xsl:when> <xsl:when test="$styleCodeLC='allindent' or $styleCodeLC='indent'">allIndent</xsl:when> <xsl:when test="$styleCodeLC='noindent'"></xsl:when> <xsl:when test="$styleCodeLC='center'">textAlignCenter</xsl:when> <xsl:when test="$styleCodeLC='right'">textAlignRight</xsl:when> <xsl:when test="$styleCodeLC='dn' or $styleCodeLC='hidden' or $styleCodeLC='datadisclaimer'">dn</xsl:when> <xsl:when test="$styleCodeLC='blue'">blue</xsl:when> <xsl:when test="$styleCodeLC='highlight'">highlight hlt3</xsl:when> <xsl:when test="$styleCodeLC='strikeout'">strikeout</xsl:when> <xsl:when test="$styleCodeLC='emphasis'">emphasis</xsl:when> <xsl:when test="$styleCodeLC='breakword'">breakWord</xsl:when> <xsl:when test="$styleCodeLC='rrule'">Rrule hlt64</xsl:when> <xsl:when test="$styleCodeLC='faded'">faded</xsl:when>   </xsl:choose> </xsl:otherwise> </xsl:choose> </xsl:template>  <xsl:template name="ListAllNames"> <xsl:for-each select="$patientNames"> <xsl:variable name="position" select="position()"/> <xsl:if test="$position>1"> <br/> </xsl:if>  <xsl:if test="$position=2"> <br/> <span class="italics">Former / Aliases: </span> <br/> </xsl:if>  <xsl:call-template name="Name">  <xsl:with-param name="name" select="$patientNames[$position]"/> </xsl:call-template> </xsl:for-each> </xsl:template>    <xsl:template name="Name"> <xsl:param name="name"/> <xsl:param name="preferred"/>  <xsl:variable name="realmCode"> <xsl:call-template name="RealmCode"> <xsl:with-param name="ctxNode" select="/cda:ClinicalDocument"/> </xsl:call-template> </xsl:variable>  <xsl:choose> <xsl:when test="$name/cda:family and not($name/cda:delimiter) and $realmCode != 'NL' and $realmCode != 'FI'">    <xsl:for-each select="$name/cda:prefix[@qualifier = 'TITLE' or not(following-sibling::*[not(self::cda:prefix)])]"> <xsl:text> </xsl:text> <xsl:value-of select="."/> </xsl:for-each>   <xsl:apply-templates select="$name/cda:given" mode="nameWithPrefixesAndSuffixes" /> <xsl:apply-templates select="$name/cda:family" mode="nameWithPrefixesAndSuffixes" />   <xsl:for-each select="$name/cda:suffix[@qualifier = 'TITLE' or not(preceding-sibling::*[not(self::cda:suffix)] or @qualifier = 'AC')]"> <xsl:text> </xsl:text> <xsl:value-of select="."/> </xsl:for-each>   <xsl:for-each select="$name/cda:suffix[@qualifier = 'AC']"> <xsl:text>, </xsl:text> <xsl:value-of select="."/> </xsl:for-each> </xsl:when> <xsl:otherwise>  <xsl:apply-templates mode="nameOrder" select="$name"/> </xsl:otherwise> </xsl:choose>   <xsl:if test="$preferred and normalize-space($preferred/*[@qualifier='CL']) != ''"> <xsl:text> "</xsl:text> <xsl:for-each select="$preferred/*[@qualifier='CL']"> <xsl:value-of select="."/> <xsl:if test="position() != last()"> <xsl:text> </xsl:text> </xsl:if> </xsl:for-each> <xsl:text>"</xsl:text> </xsl:if> </xsl:template>  <xsl:template match="cda:given|cda:family|cda:prefix|cda:suffix|text()" mode="nameOrder"> <xsl:variable name="normalized" select="normalize-space(.)"/> <xsl:if test="$normalized != ''"> <xsl:value-of select="$normalized"/> <xsl:if test="following-sibling::*[1][not(./self::cda:delimiter)]">  <xsl:text> </xsl:text> </xsl:if> </xsl:if> </xsl:template> <xsl:template match="cda:delimiter" mode="nameOrder">  <xsl:choose> <xsl:when test="text()"> <xsl:value-of select="."/> </xsl:when> <xsl:otherwise> <br/> </xsl:otherwise> </xsl:choose> </xsl:template>   <xsl:template match="cda:given|cda:family" mode="nameWithPrefixesAndSuffixes">  <xsl:if test="preceding-sibling::*[1][self::cda:prefix[not(@qualifier = 'TITLE')]]">  <xsl:variable name="lastNonPrefixID" select="generate-id(preceding-sibling::*[not(self::cda:prefix[not(@qualifier = 'TITLE')])][1])"/> <xsl:for-each select="preceding-sibling::cda:prefix[ not(@qualifier = 'TITLE')  and generate-id(preceding-sibling::*[not(self::cda:prefix[not(@qualifier = 'TITLE')])][1]) = $lastNonPrefixID]"> <xsl:text> </xsl:text> <xsl:value-of select="." /> </xsl:for-each> </xsl:if>   <xsl:text> </xsl:text> <xsl:value-of select="." />   <xsl:if test="following-sibling::*[1][self::cda:suffix[not(@qualifier = 'TITLE' or @qualifier = 'AC')]]">  <xsl:variable name="firstNonSuffixID" select="generate-id(following-sibling::*[not(self::cda:suffix[not(@qualifier = 'TITLE' or @qualifier = 'AC')])][1])"/> <xsl:for-each select="following-sibling::cda:suffix[ not(@qualifier = 'TITLE' or @qualifier = 'AC')  and generate-id(following-sibling::*[not(self::cda:suffix[not(@qualifier = 'TITLE' or @qualifier = 'AC')])][1]) = $firstNonSuffixID]"> <xsl:text> </xsl:text> <xsl:value-of select="." /> </xsl:for-each> </xsl:if> </xsl:template>   <xsl:template name="Performer"> <xsl:param name="performer" select="."/> <xsl:param name="includeFunction" select="false()" /> <xsl:param name="includeDates" select="false()"/> <xsl:param name="includeTypeCode" select="false()"/> <xsl:param name="includeDesc" select="false()"/>   <xsl:variable name="entity" select="$performer/cda:assignedEntity | $performer/cda:associatedEntity"/> <xsl:variable name="person" select="$entity/cda:assignedPerson | $entity/cda:associatedPerson"/> <xsl:variable name="organization" select="$entity/cda:representedOrganization | $entity/cda:scopingOrganization"/>  <xsl:variable name="nameAndDesc"> <xsl:variable name="name"> <xsl:call-template name="Name"> <xsl:with-param name="name" select="$person/cda:name[1]" /> </xsl:call-template> </xsl:variable> <xsl:variable name="desc" select="$person/sdtc:desc" />  <xsl:choose> <xsl:when test="$name != ''"> <xsl:value-of select="$name" /> <xsl:if test="$includeDesc and $desc != ''"> <xsl:value-of select="concat(' (', $desc, ')')"/> </xsl:if> </xsl:when> <xsl:when test="$includeDesc and $desc != ''"> <xsl:value-of select="$desc" /> </xsl:when> </xsl:choose> </xsl:variable>   <div> <xsl:if test="$nameAndDesc != ''"> <span class="bold"> <xsl:value-of select="$nameAndDesc" /> </span>  <xsl:variable name="PerformerKind"> <xsl:if test="$includeTypeCode"> <xsl:call-template name="ParticipantType"> <xsl:with-param name="typeCode" select="$performer/@typeCode"/> </xsl:call-template>  <xsl:for-each select="preceding-sibling::*[(cda:assignedEntity|cda:associatedEntity)=$entity and @typeCode!=$performer/@typeCode] |   following-sibling::*[(cda:assignedEntity|cda:associatedEntity)=$entity and @typeCode!=$performer/@typeCode]"> <xsl:variable name="addlType"> <xsl:call-template name="ParticipantType"> <xsl:with-param name="typeCode" select="./@typeCode"/> </xsl:call-template> </xsl:variable> <xsl:if test="$addlType!=''"> <xsl:value-of select="concat($ListSep,$addlType)"/> </xsl:if> </xsl:for-each> </xsl:if> <xsl:if test="$includeFunction"> <xsl:call-template name="DisplayCode"> <xsl:with-param name="code" select="$performer/cda:functionCode"/> <xsl:with-param name="noNull" select="true()"/> <xsl:with-param name="elseDisplay"> <xsl:call-template name="PerformerRole"> <xsl:with-param name="code" select="$performer/cda:functionCode/@code"/> </xsl:call-template> </xsl:with-param> </xsl:call-template> </xsl:if> </xsl:variable>  <xsl:if test="$PerformerKind!=''"> <xsl:text> (</xsl:text> <xsl:value-of select="$PerformerKind"/> <xsl:text>)</xsl:text> </xsl:if>  <xsl:if test="$includeDates"> <xsl:variable name="dateRange"> <xsl:apply-templates select="$performer/cda:time" mode="direct"> <xsl:with-param name="singleDate" />  <xsl:with-param name="defaultLowHigh" select="true()"/> </xsl:apply-templates> </xsl:variable> <xsl:if test="$dateRange != ''"> <xsl:text> (</xsl:text> <xsl:copy-of select="$dateRange"/> <xsl:text>)</xsl:text> </xsl:if> </xsl:if>  <br/> </xsl:if>   <xsl:for-each select="$entity/cda:id[@extension != '']"> <xsl:variable name="idType"> <xsl:choose> <xsl:when test="@assigningAuthorityName != ''"> <xsl:value-of select="@assigningAuthorityName"/> </xsl:when>  <xsl:when test="@root = '2.16.840.1.113883.4.6'">NPI</xsl:when> <xsl:when test="@root = '2.16.528.1.1007.3.1'">UZI</xsl:when> <xsl:when test="@root = '2.16.840.1.113883.2.4.6.1'">AGB</xsl:when> <xsl:when test="@root = '2.16.528.1.1007.5.1'">BIG</xsl:when> </xsl:choose> </xsl:variable> <xsl:if test="$idType != ''"> <xsl:value-of select="$idType"/> <xsl:text>: </xsl:text> <xsl:value-of select="@extension"/> <br/> </xsl:if> </xsl:for-each>   <xsl:apply-templates select="$entity/cda:telecom"/>   <xsl:apply-templates select="$entity/cda:addr" /> </div>   <div> <xsl:call-template name="DisplayCode"> <xsl:with-param name="code" select="$entity/cda:code"/> <xsl:with-param name="noNull" select="true()" /> </xsl:call-template> </div>     <xsl:if test="$organization"> <div> <xsl:call-template name="Organization"> <xsl:with-param name="org" select="$organization"/> </xsl:call-template> </div> </xsl:if>  </xsl:template>  <xsl:template name="Organization"> <xsl:param name="org"/>  <span class="bold"> <xsl:call-template name="Name"> <xsl:with-param name="name" select="$org/cda:name" /> </xsl:call-template> </span> <br/> <xsl:apply-templates select="$org/cda:telecom"/> <xsl:apply-templates select="$org/cda:addr"/> </xsl:template>    <xsl:template name="DisplayCode"> <xsl:param name="code"/>  <xsl:param name="elseDisplay"/>  <xsl:param name="noNull" select="false()"/>  <xsl:choose>  <xsl:when test="normalize-space($code/cda:originalText/text())"> <xsl:value-of select="$code/cda:originalText/text()" /> </xsl:when>  <xsl:when test="$code/@displayName"> <xsl:value-of select="$code/@displayName"/> </xsl:when>  <xsl:when test="$code/cda:translation"> <xsl:call-template name="DisplayCode"> <xsl:with-param name="code" select="$code/cda:translation"/> <xsl:with-param name="elseDisplay" select="$elseDisplay"/> <xsl:with-param name="noNull" select="$noNull"/> </xsl:call-template> </xsl:when>  <xsl:when test="$code/@nullFlavor and not($noNull)"> <xsl:call-template name="NullFlavor"> <xsl:with-param name="nullFlavor" select="$code/@nullFlavor"/> </xsl:call-template> </xsl:when> <xsl:when test="$elseDisplay"> <xsl:value-of select="$elseDisplay"/> </xsl:when>  <xsl:when test="$noNull"/> <xsl:otherwise><xsl:value-of select="$Unknown"/></xsl:otherwise> </xsl:choose> </xsl:template>   <xsl:template match="cda:languageCommunication"> <div>  <xsl:if test="cda:proficiencyLevelCode/@code='E'"> <xsl:attribute name="title">Proficiency level: Excellent</xsl:attribute> </xsl:if> <xsl:if test="cda:proficiencyLevelCode/@code='F'"> <xsl:attribute name="title">Proficiency level: Fair</xsl:attribute> </xsl:if> <xsl:if test="cda:proficiencyLevelCode/@code='G'"> <xsl:attribute name="title">Proficiency level: Good</xsl:attribute> </xsl:if> <xsl:if test="cda:proficiencyLevelCode/@code='P'"> <xsl:attribute name="title">Proficiency level: Poor</xsl:attribute> </xsl:if>   <xsl:call-template name="DisplayCode"> <xsl:with-param name="code" select="cda:languageCode"/> <xsl:with-param name="elseDisplay"> <xsl:call-template name="ConvertLanguage"> <xsl:with-param name="language" select="cda:languageCode/@code"/> </xsl:call-template> </xsl:with-param> </xsl:call-template>   <xsl:if test="cda:modeCode/@code"> <xsl:text> - </xsl:text> <xsl:variable name="mode" select="cda:modeCode/@code"/> <xsl:choose> <xsl:when test="$mode='ESP' or $mode='RSP'">Spoken</xsl:when> <xsl:when test="$mode='EWR' or $mode='RWR'">Written</xsl:when> <xsl:when test="$mode='ESGN' or $mode='RSGN'">Signed</xsl:when> </xsl:choose> </xsl:if>   <xsl:if test="cda:preferenceInd/@value='true' and cda:languageCode/@code"> <xsl:text> </xsl:text> <xsl:text xml:id="langPreferred">(Preferred)</xsl:text> </xsl:if> </div> </xsl:template>  <xsl:template name="OnClickURL"> <xsl:param name="url"/> <xsl:value-of select="concat('window.open(&quot;',$url,'&quot;)')"/> </xsl:template>     <xsl:template name="ConvertLanguage"> <xsl:param name="language"/> <xsl:variable name="code"> <xsl:choose> <xsl:when test="contains($language,'-')"> <xsl:value-of select="translate(substring-before($language,'-'),$ucletters,$lcletters)"/> </xsl:when> <xsl:otherwise> <xsl:value-of select="translate($language,$ucletters,$lcletters)"/> </xsl:otherwise> </xsl:choose> </xsl:variable> <xsl:choose xml:id="vocabLanguages">  <xsl:when test="$code='eng' or $code='en'">English</xsl:when> <xsl:when test="$code='spa' or $code='sp' or $code='es' or $code='span'">Spanish</xsl:when> <xsl:when test="$code='fre' or $code='fra' or $code='fr'">French</xsl:when> <xsl:when test="$code='chi' or $code='zho' or $code='zh'">Chinese</xsl:when> <xsl:when test="$code='dut' or $code='nld' or $code='nl'">Dutch</xsl:when> <xsl:when test="$code='ger' or $code='deu' or $code='de'">German</xsl:when> <xsl:when test="$code='rus' or $code='ru'">Russian</xsl:when>  <xsl:when test="$code='haw'">Hawaiian</xsl:when> <xsl:when test="$code='ilo'">Iloko</xsl:when> <xsl:when test="$code='kor' or $code='ko'">Korean</xsl:when> <xsl:when test="$code='smo' or $code='sm'">Samoan</xsl:when> <xsl:when test="$code='tgl' or $code='tl'">Tagalog</xsl:when> <xsl:when test="$code='vie' or $code='vi'">Vietnamese</xsl:when> <xsl:when test="$code='fij' or $code='fj'">Fijian</xsl:when> <xsl:when test="$code='mah' or $code='mh'">Marshallese</xsl:when> <xsl:when test="$code='mao' or $code='mri' or $code='mi'">Maori</xsl:when> <xsl:when test="$code='tah' or $code='ty'">Tahitian</xsl:when> <xsl:when test="$code='tog' or $code='ton' or $code='to'">Tonga</xsl:when> <xsl:when test="$code='cmn'">Mandarin Chinese</xsl:when> <xsl:when test="$code='ara' or $code='ar'">Arabic</xsl:when> <xsl:when test="$code='jpn' or $code='ja'">Japanese</xsl:when>  <xsl:when test="$code='sgn'">Sign Languages</xsl:when> <xsl:when test="$code='und'">Undetermined</xsl:when> <xsl:when test="$code='mis'">Missing</xsl:when> <xsl:when test="$code='cpf'">French Creole</xsl:when> <xsl:when test="$code='yue'">Cantonese</xsl:when> <xsl:when test="$code='ita' or $code='it'">Italian</xsl:when> <xsl:when test="$code='por' or $code='pt'">Portuguese</xsl:when> <xsl:when test="$code='hin' or $code='hi'">Hindi</xsl:when> <xsl:when test="$code='pol' or $code='pl'">Polish</xsl:when> <xsl:when test="$code='ine'">Other Indo-European languages</xsl:when> <xsl:when test="$code='urd' or $code='ur'">Urdu</xsl:when> <xsl:when test="$code='per' or $code='fas' or $code='fa'">Persian</xsl:when> <xsl:when test="$code='guj' or $code='gu'">Gujarati</xsl:when> <xsl:when test="$code='yor' or $code='yo'">Yoruba</xsl:when> <xsl:when test="$code='ibo' or $code='ig'">Igbo</xsl:when> <xsl:when test="$code='kro'">Kru</xsl:when> <xsl:when test="$code='sla'">Slavic Languages</xsl:when> <xsl:when test="$code='gre' or $code='ell' or $code='el'">Greek</xsl:when> <xsl:when test="$code='ben' or $code='bn'">Bengali</xsl:when> <xsl:when test="$code='pan' or $code='pa'">Punjabi</xsl:when> <xsl:when test="$code='tel' or $code='te'">Telugu</xsl:when> <xsl:when test="$code='arm' or $code='hye' or $code='hy'">Armenian</xsl:when> <xsl:when test="$code='hmn'">Hmong</xsl:when> <xsl:when test="$code='heb' or $code='he'">Hebrew</xsl:when> <xsl:when test="$code='mkh'">Mon-Khmer, Cambodian</xsl:when> <xsl:when test="$code='nai'">Other Native North American languages</xsl:when> <xsl:when test="$code='amh' or $code='am'">Amharic</xsl:when> <xsl:when test="$code='tam' or $code='ta'">Tamil</xsl:when> <xsl:when test="$code='nav' or $code='nv'">Navajo</xsl:when> <xsl:when test="$code='yid' or $code='yi'">Yiddish</xsl:when> <xsl:when test="$code='rum' or $code='ron' or $code='ro'">Romanian</xsl:when> <xsl:when test="$code='tha' or $code='th'">Thai</xsl:when> <xsl:when test="$code='lao' or $code='lo'">Lao</xsl:when> <xsl:when test="$code='ukr' or $code='uk'">Ukrainian</xsl:when> <xsl:when test="$code='mal' or $code='ml'">Malayalam</xsl:when> <xsl:when test="$code='alb' or $code='sqi' or $code='sq'">Albanian</xsl:when> <xsl:when test="$code='pdc'">Pennsylvania Dutch</xsl:when> <xsl:when test="$code='cus'">Cushite</xsl:when> <xsl:when test="$code='tur' or $code='tr'">Turkish</xsl:when> <xsl:when test="$code='nep' or $code='ne'">Nepali</xsl:when> <xsl:when test="$code='swa' or $code='sw'">Swahili</xsl:when> <xsl:when test="$code='hun' or $code='hu'">Hungarian</xsl:when> <xsl:when test="$code='fox'">Formosan</xsl:when> <xsl:when test="$code='syr'">Syriac</xsl:when> <xsl:when test="$code='mar' or $code='mr'">Marathi</xsl:when> <xsl:when test="$code='srp' or $code='sr'">Serbian</xsl:when> <xsl:when test="$code='ind' or $code='id'">Indonesian</xsl:when> <xsl:when test="$code='bur' or $code='mya' or $code='my'">Burmese</xsl:when> <xsl:when test="$code='bul' or $code='bg'">Bulgarian</xsl:when> <xsl:when test="$code='bnt'">Bantu</xsl:when> <xsl:when test="$code='swe' or $code='sv'">Swedish</xsl:when> <xsl:when test="$code='hrv' or $code='hr'">Croatian</xsl:when> <xsl:when test="$code='kan' or $code='kn'">Kannada</xsl:when> <xsl:when test="$code='cze' or $code='ces' or $code='cs'">Czech</xsl:when> <xsl:when test="$code='lit' or $code='lt'">Lithuanian</xsl:when> <xsl:when test="$code='lim' or $code='li'">Limburgish</xsl:when> <xsl:when test="$code='nor' or $code='no'">Norwegian</xsl:when> <xsl:when test="$code='som' or $code='so'">Somali</xsl:when> <xsl:when test="$code='ful' or $code='ff'">Fulani</xsl:when> <xsl:when test="$code='kar'">Karen</xsl:when> <xsl:when test="$code='dmn'">Mande</xsl:when> <xsl:when test="$code='bsb' or $code='bsy'">Bisayan</xsl:when> <xsl:when test="$code='dan' or $code='da'">Danish</xsl:when> <xsl:when test="$code='slk' or $code='sk'">Slovak</xsl:when> <xsl:when test="$code='sin' or $code='si'">Sinhalese</xsl:when> <xsl:when test="$code='fin' or $code='fi'">Finnish</xsl:when> <xsl:when test="$code='afr' or $code='af'">Afrikaans</xsl:when> <xsl:when test="$code='mkd' or $code='mk'">Macedonian</xsl:when> <xsl:when test="$code='pus' or $code='ps'">Pashto</xsl:when> <xsl:when test="$code='jam'">Jamaican Creole</xsl:when> <xsl:when test="$code='frc'">Cajun</xsl:when> <xsl:when test="$code='gla' or $code='gd'">Gaelic</xsl:when> <xsl:when test="$code='cha' or $code='ch'">Chamorro</xsl:when> <xsl:when test="$code='ypk'">Yupik</xsl:when> <xsl:when test="$code='hmx'">Hmong-Mien</xsl:when> <xsl:when test="$code='dak'">Dakota</xsl:when> <xsl:when test="$code='kur' or $code='ku'">Kurdish</xsl:when> <xsl:when test="$code='bod' or $code='bo'">Tibetan</xsl:when> <xsl:when test="$code='lav' or $code='lv'">Latvian</xsl:when> <xsl:when test="$code='ceb'">Cebuano</xsl:when> <xsl:when test="$code='msa' or $code='ms'">Malay</xsl:when> <xsl:when test="$code='apa'">Apache</xsl:when> <xsl:when test="$code='kee' or $code='kjq'">Keres</xsl:when> <xsl:when test="$code='chr'">Cherokee</xsl:when> <xsl:when test="$code='kri'">Krio</xsl:when> <xsl:when test="$code='mon' or $code='mn'">Mongolian</xsl:when> <xsl:when test="$code='oji' or $code='oj'">Ojibwa</xsl:when> <xsl:when test="$code='cho'">Choctaw</xsl:when> <xsl:when test="$code='zun'">Zuni</xsl:when> <xsl:when test="$code='cau'">Caucasian</xsl:when> <xsl:when test="$code='snd' or $code='sd'">Sindhi</xsl:when> <xsl:when test="$code='uig' or $code='ug'">Uighur</xsl:when> <xsl:when test="$code='chk'">Trukese (Chuukese)</xsl:when> <xsl:when test="$code='cdc'">Chadic</xsl:when> <xsl:when test="$code='csu'">Sudanic</xsl:when> <xsl:when test="$code='myn'">Mayan languages</xsl:when> <xsl:when test="$code='ood' or $code='pia'">Pima</xsl:when> <xsl:when test="$code='sdv'">Nilotic</xsl:when> <xsl:when test="$code='ipk' or $code='ik'">Inupiaq</xsl:when> <xsl:when test="$code='slv' or $code='sl'">Slovene</xsl:when> <xsl:when test="$code='hop'">Hopi</xsl:when> <xsl:when test="$code='est' or $code='et'">Estonian</xsl:when> <xsl:when test="$code='pam'">Pampangan</xsl:when> <xsl:when test="$code='efi'">Efik</xsl:when> <xsl:when test="$code='ori' or $code='or'">Oriya</xsl:when> <xsl:when test="$code='omq'">Oto - Manguen</xsl:when> <xsl:when test="$code='isl' or $code='is'">Icelandic</xsl:when> <xsl:when test="$code='tew'">Tewa</xsl:when> <xsl:when test="$code='mus'">Muskogee</xsl:when> <xsl:when test="$code='cro'">Crow</xsl:when> <xsl:when test="$code='pau'">Palau</xsl:when> <xsl:when test="$code='pon'">Ponapean</xsl:when> <xsl:when test="$code='awd'">Arawakian</xsl:when> <xsl:when test="$code='ber'">Berber</xsl:when> <xsl:when test="$code='wuu'">Wu</xsl:when> <xsl:when test="$code='cat' or $code='ca'">Catalan</xsl:when> <xsl:when test="$code='pag'">Pangasinan</xsl:when> <xsl:when test="$code='cy' or $code='cym'">Welsh</xsl:when> <xsl:when test="$code='lax'">Tiwa</xsl:when> <xsl:when test="$code='aze' or $code='az'">Azerbaijani</xsl:when> <xsl:when test="$code='mun'">Munda</xsl:when> <xsl:when test="$code='shh'">Shoshoni</xsl:when> <xsl:when test="$code='moh'">Mohawk</xsl:when> <xsl:when test="$code='tow'">Jemez</xsl:when> <xsl:when test="$code='chy'">Cheyenne</xsl:when> <xsl:when test="$code='ute'">Ute</xsl:when> <xsl:when test="$code='eus' or $code='eu'">Basque</xsl:when> <xsl:when test="$code='bel' or $code='be'">Belarusian</xsl:when> <xsl:when test="$code='kas' or $code='ks'">Kashmiri</xsl:when> <xsl:when test="$code='win'">Ho-Chunk</xsl:when> <xsl:when test="$code='rom'">Romany</xsl:when> <xsl:when test="$code='kaz' or $code='kk'">Kazakh</xsl:when> <xsl:when test="$code='gon'">Gondi</xsl:when> <xsl:when test="$code='bla'">Blackfoot</xsl:when> <xsl:when test="$code='hak'">Hakka</xsl:when> <xsl:when test="$code='sal'">Salish</xsl:when> <xsl:when test="$code='asm' or $code='as'">Assamese</xsl:when> <xsl:when test="$code='pao'">Paiute</xsl:when> <xsl:when test="$code='que' or $code='qu'">Quechua</xsl:when> <xsl:when test="$code='nez' or $code='uma' or $code='waa' or $code='yak' or $code='tqn'">Sahaptian</xsl:when> <xsl:when test="$code='kac'">Kachin</xsl:when> <xsl:when test="$code='esx'">Eskimo</xsl:when> <xsl:when test="$code='ath'">Athapascan</xsl:when> <xsl:when test="$code='tli'">Tlingit</xsl:when> <xsl:when test="$code='kos'">Kusaiean</xsl:when> <xsl:when test="$code='dra'">Dravidian</xsl:when> <xsl:when test="$code='cba'">Chibchan</xsl:when> <xsl:when test="$code='arp'">Arapaho</xsl:when> <xsl:when test="$code='cja' or $code='cjm'">Cham</xsl:when> <xsl:when test="$code='alg'">Algonquian</xsl:when> <xsl:when test="$code='see'">Seneca</xsl:when> <xsl:when test="$code='com'">Comanche</xsl:when> <xsl:when test="$code='ale'">Aleut</xsl:when> <xsl:when test="$code='pot'">Potawatomi</xsl:when> <xsl:when test="$code='pap'">Papiamento</xsl:when> <xsl:when test="$code='otw'">Ottawa</xsl:when> <xsl:when test="$code='cal'">Carolinian</xsl:when> <xsl:when test="$code='cre' or $code='cr'">Cree</xsl:when> <xsl:when test="$code='pqm'">Malecite-Passamaquoddy</xsl:when> <xsl:when test="$code='kic'">Kickapoo</xsl:when> <xsl:when test="$code='ban'">Balinese</xsl:when> <xsl:when test="$code='one'">Oneida</xsl:when> <xsl:when test="$code='kio'">Kiowa</xsl:when> <xsl:when test="$code='mlg' or $code='mg'">Malagasy</xsl:when> <xsl:when test="$code='yap'">Yapese</xsl:when> <xsl:when test="$code='azc' or $code='nah'">Uto-Aztecan</xsl:when> <xsl:when test="$code='raj'">Rajasthani</xsl:when> <xsl:when test="$code='mdd'">Mbum</xsl:when> <xsl:when test="$code='bik'">Bikol</xsl:when> <xsl:when test="$code='yaq'">Yaqui</xsl:when> <xsl:when test="$code='hid'">Hidatsa</xsl:when> <xsl:when test="$code='bih' or $code='bh'">Bihari</xsl:when> <xsl:when test="$code='kir' or $code='ky'">Kirghiz</xsl:when> <xsl:when test="$code='fry' or $code='fy'">Frisian</xsl:when> <xsl:when test="$code='apj'">Jicarilla</xsl:when>  <xsl:when test="$code='ary'">Moroccan Arabic</xsl:when> <xsl:when test="$code='nds'">Low German</xsl:when> <xsl:otherwise> <xsl:value-of select="$code"/> </xsl:otherwise> </xsl:choose> </xsl:template>  <xsl:template name="Role"> <xsl:param name="roleCode"/> <xsl:choose xml:id="vocabHL7SupportRole"> <xsl:when test="$roleCode='PRS'">Personal Relationship</xsl:when> <xsl:when test="$roleCode='NOK'">Next of Kin</xsl:when> <xsl:when test="$roleCode='CAREGIVER'">Caregiver</xsl:when> <xsl:when test="$roleCode='AGNT'">Agent</xsl:when> <xsl:when test="$roleCode='GUAR'">Guarantor</xsl:when> <xsl:when test="$roleCode='ECON'">Emergency Contact</xsl:when> <xsl:when test="$roleCode='PROV'">Provider</xsl:when> <xsl:when test="$roleCode='EXCEST'">Estate Executor</xsl:when> <xsl:when test="$roleCode='GUADLTM'">Guardian Ad Litem</xsl:when> <xsl:when test="$roleCode='GUARD'">Guardian</xsl:when> <xsl:when test="$roleCode='POWATT'">Power of Attorney</xsl:when> <xsl:when test="$roleCode='DPOWATT'">Durable Power of Attorney</xsl:when> <xsl:when test="$roleCode='HPOWATT'">Healthcare Power of Attorney</xsl:when> <xsl:when test="$roleCode='SPOWATT'">Special Power of Attorney</xsl:when> <xsl:otherwise><xsl:value-of select="$Other"/></xsl:otherwise> </xsl:choose> </xsl:template>  <xsl:template name="ParticipantType"> <xsl:param name="typeCode"/> <xsl:choose xml:id="vocabHL7ParticipantType"> <xsl:when test="$typeCode=''"/> <xsl:when test="$typeCode='ADM'">Admitting</xsl:when> <xsl:when test="$typeCode='ATND'">Attending</xsl:when> <xsl:when test="$typeCode='CON'">Consulting</xsl:when> <xsl:when test="$typeCode='DIS'">Discharge</xsl:when> <xsl:when test="$typeCode='REF'">Referring</xsl:when> <xsl:otherwise><xsl:value-of select="$typeCode"/></xsl:otherwise> </xsl:choose> </xsl:template>  <xsl:template name="PerformerRole"> <xsl:param name="code"/>  <xsl:choose> <xsl:when test="$code='AD' or $code='ADMPHYS'"><xsl:call-template name="ParticipantType"><xsl:with-param name="typeCode">ADM</xsl:with-param></xsl:call-template></xsl:when> <xsl:when test="$code='AT' or $code='ATTPHYS'"><xsl:call-template name="ParticipantType"><xsl:with-param name="typeCode">ATND</xsl:with-param></xsl:call-template></xsl:when> <xsl:when test="$code='CP'"><xsl:call-template name="ParticipantType"><xsl:with-param name="typeCode">CON</xsl:with-param></xsl:call-template></xsl:when> <xsl:when test="$code='DISPHYS'"><xsl:call-template name="ParticipantType"><xsl:with-param name="typeCode">DIS</xsl:with-param></xsl:call-template></xsl:when> <xsl:when test="$code='RP'"><xsl:call-template name="ParticipantType"><xsl:with-param name="typeCode">REF</xsl:with-param></xsl:call-template></xsl:when> </xsl:choose> <xsl:choose xml:id="vocabHL7PerformerRole"> <xsl:when test="$code='RNDPHYS'">Rounding</xsl:when> <xsl:when test="$code='FHCP'">Family Health Care Professional</xsl:when> <xsl:when test="$code='RT'">Referred-to</xsl:when> <xsl:when test="$code='ANEST' or $code='ANRS'">Anesthesia</xsl:when> <xsl:when test="$code='FASST' or $code='PRISURG' or $code='SASST'">Surgery</xsl:when> <xsl:when test="$code='MDWF'">Midwife</xsl:when> <xsl:when test="$code='SNRS' or $code='NASST'">Nurse</xsl:when> </xsl:choose> </xsl:template>   <xsl:template name="NullFlavor"> <xsl:param name="nullFlavor" select="@nullFlavor"/> <xsl:choose xml:id="vocabHL7NullFlavors"> <xsl:when test="$nullFlavor='NI'">No information</xsl:when> <xsl:when test="$nullFlavor='NA'">Not applicable</xsl:when>  <xsl:when test="$nullFlavor='NAV' or $nullFlavor='MSK'">Not Available</xsl:when> <xsl:when test="$nullFlavor='NASK'">Not asked</xsl:when> <xsl:when test="$nullFlavor='ASKU'">Asked but unknown</xsl:when> <xsl:otherwise><xsl:value-of select="$Unknown"/></xsl:otherwise> </xsl:choose> </xsl:template>   <xsl:template match="cda:administrativeGenderCode"> <span id="genderCode"> <xsl:choose>   <xsl:when test="cda:translation[@codeSystem='2.16.840.1.113883.6.96' and @code='407376001']"><xsl:value-of select="$Transgender"/><xsl:text> </xsl:text><xsl:value-of select="$Female"/></xsl:when> <xsl:when test="cda:translation[@codeSystem='2.16.840.1.113883.6.96' and @code='407377005']"><xsl:value-of select="$Transgender"/><xsl:text> </xsl:text><xsl:value-of select="$Male"/></xsl:when>   <xsl:when test="cda:translation[@codeSystem='1.2.840.114350.1.72.9' and @code='MTF']"><xsl:value-of select="$Transgender"/><xsl:text> </xsl:text><xsl:value-of select="$Female"/></xsl:when> <xsl:when test="cda:translation[@codeSystem='1.2.840.114350.1.72.9' and @code='FTM']"><xsl:value-of select="$Transgender"/><xsl:text> </xsl:text><xsl:value-of select="$Male"/></xsl:when>   <xsl:when test="@code='M'"><xsl:value-of select="$Male"/></xsl:when> <xsl:when test="@code='F'"><xsl:value-of select="$Female"/></xsl:when>   <xsl:otherwise> <xsl:text>Gender: </xsl:text> <xsl:call-template name="DisplayCode"> <xsl:with-param name="code" select="."/> </xsl:call-template> </xsl:otherwise> </xsl:choose> </span> </xsl:template>   <xsl:template match="cda:raceCode | sdtc:raceCode | cda:ethnicGroupCode | sdtc:ethnicGroupCode"> <xsl:call-template name="DisplayCode"> <xsl:with-param name="code" select="."/> </xsl:call-template> <xsl:if test="position() != last()"> <xsl:value-of select="$ListSep"/> </xsl:if> </xsl:template>   <xsl:template name="DedupList"> <xsl:param name="list"/> <xsl:param name="delim" select="$ListSep" />  <xsl:if test="$list != ''"> <xsl:variable name="head"> <xsl:choose> <xsl:when test="contains($list, $delim)"> <xsl:value-of select="substring-before($list, $delim)"/> </xsl:when> <xsl:otherwise> <xsl:value-of select="$list"/> </xsl:otherwise> </xsl:choose> </xsl:variable> <xsl:variable name="tail" select="substring-after($list, $delim)" /> <xsl:if test="not(contains(concat($delim, $tail, $delim), concat($delim, $head, $delim)))"> <xsl:value-of select="$head"/> <xsl:if test="$tail != ''"> <xsl:value-of select="$delim"/> </xsl:if> </xsl:if> <xsl:call-template name="DedupList"> <xsl:with-param name="list" select="$tail"/> <xsl:with-param name="delim" select="$delim"/> </xsl:call-template> </xsl:if> </xsl:template>   <xsl:template name="DisplayBoolean"> <xsl:param name="bool"/> <xsl:choose> <xsl:when test="$bool = 'true'"><xsl:value-of select="$Yes"/></xsl:when> <xsl:when test="$bool = 'false'"><xsl:value-of select="$No"/></xsl:when> <xsl:otherwise><xsl:value-of select="$Unknown"/></xsl:otherwise> </xsl:choose> </xsl:template>   <xsl:template name="RealmCode"> <xsl:param name="ctxNode" select="."/> <xsl:value-of select="($ctxNode/ancestor-or-self::*/cda:realmCode)[last()]/@code"/> </xsl:template>   <xsl:template name="ValOrDefault"> <xsl:param name="val"/> <xsl:param name="default" select="$Unknown"/> <xsl:choose> <xsl:when test="$val!=''"> <xsl:copy-of select="$val"/> </xsl:when> <xsl:otherwise> <xsl:value-of select="$default"/> </xsl:otherwise> </xsl:choose> </xsl:template>   <xsl:template name="Year"> <xsl:param name="date" /> <xsl:value-of select="substring ($date, 1, 4)" /> </xsl:template>   <xsl:template name="UTCOffset"> <xsl:param name="date" />  <xsl:variable name="sep"> <xsl:call-template name="TZSep"> <xsl:with-param name="inst" select="$date"/> </xsl:call-template> </xsl:variable> <xsl:if test="$sep != ''"> <xsl:value-of select="$sep"/> <xsl:value-of select="substring-after($date, $sep)"/> </xsl:if> </xsl:template>   <xsl:template name="UTCOffsetSeconds"> <xsl:param name="offset" />  <xsl:variable name="sign"> <xsl:choose> <xsl:when test="starts-with($offset, '-')"> <xsl:value-of select="-1" /> </xsl:when> <xsl:otherwise> <xsl:value-of select="1" /> </xsl:otherwise> </xsl:choose> </xsl:variable>  <xsl:variable name="hours" select="number(substring($offset, 2, 2))" /> <xsl:variable name="mins" select="number(substring($offset, 4, 2))" />  <xsl:value-of select="$sign * (60 * (60 * $hours + $mins))" /> </xsl:template>   <xsl:template name="CompareInstants"> <xsl:param name="inst" /> <xsl:param name="other" />  <xsl:variable name="minLength">  <xsl:variable name="instLength"> <xsl:variable name="instStripped"> <xsl:call-template name="StripTZ"> <xsl:with-param name="inst" select="$inst" /> </xsl:call-template> </xsl:variable> <xsl:value-of select="string-length($instStripped)" /> </xsl:variable>  <xsl:variable name="otherLength"> <xsl:variable name="otherStripped"> <xsl:call-template name="StripTZ"> <xsl:with-param name="inst" select="$other" /> </xsl:call-template> </xsl:variable> <xsl:value-of select="string-length($otherStripped)" /> </xsl:variable>  <xsl:choose> <xsl:when test="$instLength &gt; $otherLength"> <xsl:value-of select="$otherLength"/> </xsl:when> <xsl:otherwise> <xsl:value-of select="$instLength"/> </xsl:otherwise> </xsl:choose> </xsl:variable>  <xsl:variable name="instStripped" select="substring($inst, 1, $minLength)"/> <xsl:variable name="otherStripped" select="substring($other, 1, $minLength)"/>  <xsl:if test="$instStripped != $otherStripped"> <xsl:value-of select="$instStripped &gt; $otherStripped"/> </xsl:if>  </xsl:template>   <xsl:template name="StripTZ"> <xsl:param name="inst" />  <xsl:variable name="sep"> <xsl:call-template name="TZSep"> <xsl:with-param name="inst" select="$inst"/> </xsl:call-template> </xsl:variable>  <xsl:choose> <xsl:when test="$sep != ''"> <xsl:value-of select="substring-before($inst, $sep)"/> </xsl:when> <xsl:otherwise> <xsl:value-of select="$inst"/> </xsl:otherwise> </xsl:choose> </xsl:template>   <xsl:template name="TZSep"> <xsl:param name="inst" />  <xsl:choose> <xsl:when test="contains($inst, '+')">+</xsl:when> <xsl:when test="contains($inst, '-')">-</xsl:when> </xsl:choose> </xsl:template>   <xsl:template match="cda:effectiveTime | cda:time" mode="direct"> <xsl:param name="singleDate" select="@value" /> <xsl:param name="fromDate" select="cda:low/@value"/> <xsl:param name="toDate" select="cda:high/@value"/> <xsl:param name="defaultLowHigh" select="false()" />  <xsl:variable name="singleDateString"> <xsl:call-template name="AccessibleDate"> <xsl:with-param name="date" select="$singleDate" /> </xsl:call-template> </xsl:variable> <xsl:variable name="fromDateString"> <xsl:call-template name="AccessibleDate"> <xsl:with-param name="date" select="$fromDate"/> </xsl:call-template> </xsl:variable> <xsl:variable name="toDateString"> <xsl:call-template name="AccessibleDate"> <xsl:with-param name="date" select="$toDate"/> </xsl:call-template> </xsl:variable>  <xsl:choose>  <xsl:when test="$fromDateString='' and $toDateString='' and $singleDateString!=''"> <xsl:copy-of select="$singleDateString"/> </xsl:when>  <xsl:when test="$fromDateString!='' and $toDateString!='' and $fromDateString!=$toDateString"> <xsl:copy-of select="$fromDateString"/> <xsl:text> - </xsl:text> <xsl:copy-of select="$toDateString"/> </xsl:when>  <xsl:when test="$fromDateString=$toDateString"> <xsl:copy-of select="$fromDateString"/> </xsl:when>  <xsl:when test="$fromDateString!='' and $defaultLowHigh"> <span id="langDateToNow"><xsl:copy-of select="$fromDateString"/> - Present</span> </xsl:when>  <xsl:when test="$toDateString!='' and $defaultLowHigh"> <span id="langDateUntil">Until <xsl:copy-of select="$toDateString" /></span> </xsl:when>  <xsl:otherwise> <xsl:copy-of select="$fromDateString"/> <xsl:copy-of select="$toDateString" /> </xsl:otherwise> </xsl:choose>  </xsl:template>   <xsl:template name="AccessibleDate"> <xsl:param name="date" /> <xsl:param name="showTime" /> <xsl:if test="$date"> <span aria-hidden="true"> <xsl:call-template name="Date"> <xsl:with-param name="date" select="$date" /> <xsl:with-param name="showTime" select="$showTime" /> </xsl:call-template> </span> <span class="SRonly"> <xsl:call-template name="Date"> <xsl:with-param name="date" select="$date" /> <xsl:with-param name="showTime" select="$showTime" /> <xsl:with-param name="fullMonth" select="true()"/> </xsl:call-template> </span> </xsl:if> </xsl:template>   <xsl:template name="Date"> <xsl:param name="date" /> <xsl:param name="showTime" /> <xsl:param name="fullMonth" select="false()"/>  <xsl:variable name="dateFormat">MDY</xsl:variable> <xsl:choose> <xsl:when test="$date">  <xsl:variable name="year" select="substring ($date, 1, 4)" /> <xsl:variable name="month" select="substring ($date, 5, 2)" /> <xsl:variable name="day" select="substring ($date, 7, 2)" />  <xsl:if test="$dateFormat='DMY'"> <xsl:value-of select="$day" /> </xsl:if>  <xsl:choose> <xsl:when test="$fullMonth"> <xsl:choose xml:id="vocabMonthsFull"> <xsl:when test="$month=01">January </xsl:when> <xsl:when test="$month=02">February </xsl:when> <xsl:when test="$month=03">March </xsl:when> <xsl:when test="$month=04">April </xsl:when> <xsl:when test="$month=05" xml:id="langMayFull">May </xsl:when> <xsl:when test="$month=06">June </xsl:when> <xsl:when test="$month=07">July </xsl:when> <xsl:when test="$month=08">August </xsl:when> <xsl:when test="$month=09">September </xsl:when> <xsl:when test="$month=10">October </xsl:when> <xsl:when test="$month=11">November </xsl:when> <xsl:when test="$month=12">December </xsl:when> </xsl:choose> </xsl:when> <xsl:otherwise> <xsl:choose xml:id="vocabMonths"> <xsl:when test="$month=01">Jan. </xsl:when> <xsl:when test="$month=02">Feb. </xsl:when> <xsl:when test="$month=03">Mar. </xsl:when> <xsl:when test="$month=04">Apr. </xsl:when> <xsl:when test="$month=05" xml:id="langMayAbbr">May </xsl:when> <xsl:when test="$month=06">Jun. </xsl:when> <xsl:when test="$month=07">Jul. </xsl:when> <xsl:when test="$month=08">Aug. </xsl:when> <xsl:when test="$month=09">Sep. </xsl:when> <xsl:when test="$month=10">Oct. </xsl:when> <xsl:when test="$month=11">Nov. </xsl:when> <xsl:when test="$month=12">Dec. </xsl:when> </xsl:choose> </xsl:otherwise> </xsl:choose>  <xsl:if test="$dateFormat='MDY' and $day!=''"> <xsl:value-of select="$day" /> <xsl:text>, </xsl:text> </xsl:if>  <xsl:value-of select="$year" />  <xsl:if test="$showTime and string-length($date) &gt; 11"> <xsl:variable name="timeFormat">h:mm tt</xsl:variable> <xsl:variable name="hour" select="substring ($date, 9, 2)" /> <xsl:variable name="minute" select="substring ($date, 11, 2)" /> <xsl:text> </xsl:text> <xsl:choose> <xsl:when test="$timeFormat='h:mm tt'"> <xsl:variable name="AMPM"> <xsl:choose> <xsl:when test="$hour &lt; 12">AM</xsl:when> <xsl:otherwise>PM</xsl:otherwise> </xsl:choose> </xsl:variable> <xsl:variable name="displayHour"> <xsl:choose> <xsl:when test="$hour = 0 or $hour = 12">12</xsl:when> <xsl:otherwise> <xsl:value-of select="$hour mod 12"/> </xsl:otherwise> </xsl:choose> </xsl:variable> <xsl:value-of select="concat($displayHour, ':', $minute, ' ', $AMPM)"/> </xsl:when> <xsl:when test="$timeFormat='HH:mm'"> <xsl:value-of select="concat($hour, ':', $minute)"/> </xsl:when> </xsl:choose> </xsl:if> </xsl:when> </xsl:choose> </xsl:template>   <xsl:template name="ChooseSectionColor"> <xsl:param name="code" select="cda:code/@code"/> <xsl:param name="title" select="translate(cda:title,$lcletters,$ucletters)" /> <xsl:variable name="type"> <xsl:call-template name="SectionType"> <xsl:with-param name="code" select="$code" /> </xsl:call-template> </xsl:variable> <xsl:choose>  <xsl:when test="$type='allergy'">R</xsl:when> <xsl:when test="$type='advdir'">R</xsl:when>  <xsl:when test="$type='problem'">O</xsl:when> <xsl:when test="$type='dx'">O</xsl:when> <xsl:when test="$type='hx'">O</xsl:when> <xsl:when test="$type='fam'">O</xsl:when>  <xsl:when test="$type='med'">B</xsl:when> <xsl:when test="$type='imm'">B</xsl:when>  <xsl:when test="$type='lab'">G</xsl:when> <xsl:when test="$type='ecg'">G</xsl:when> <xsl:when test="$type='imaging'">G</xsl:when> <xsl:when test="$type='result'">G</xsl:when> <xsl:when test="$type='implant'">G</xsl:when> <xsl:when test="$type='vital'">G</xsl:when>  <xsl:when test="$type='notes'">P</xsl:when> <xsl:when test="$type='proc'">P</xsl:when>  <xsl:when test="$type='insurance'">C</xsl:when> <xsl:when test="$type='comment'">C</xsl:when> <xsl:when test="$type='nonclin'">C</xsl:when>  <xsl:otherwise>E</xsl:otherwise> </xsl:choose> </xsl:template>  <xsl:template name="SectionType"> <xsl:param name="code" select="cda:code/@code" />  <xsl:param name="title" select="translate(cda:title,$lcletters,$ucletters)" />  <xsl:variable name="type"> <xsl:choose> <xsl:when test="$code='X-DOCCMT'">comment</xsl:when> <xsl:when test="$code='X-DOCCMTADDL'">comment</xsl:when> <xsl:when test="$code='94081-7'">comment</xsl:when> <xsl:when test="$code='X-DOCPERF'">comment</xsl:when> <xsl:when test="$code='X-CE-PFD'">comment</xsl:when> <xsl:when test="$code='48764-5'">comment</xsl:when>  <xsl:when test="$code='10155-0'">allergy</xsl:when> <xsl:when test="$code='30948-4'">allergy</xsl:when>  <xsl:when test="$code='44939-7'">allergy</xsl:when>  <xsl:when test="$code='48765-2'">allergy</xsl:when> <xsl:when test="$code='57849-2'">allergy</xsl:when>  <xsl:when test="$code='67841-7'">allergy</xsl:when>   <xsl:when test="$code='101.16011'">allergy</xsl:when> <xsl:when test="$code='101.20113'">allergy</xsl:when>   <xsl:when test="$code='11450-4'">problem</xsl:when> <xsl:when test="$code='11348-0'">problem</xsl:when> <xsl:when test="$code='75310-3'">problem</xsl:when> <xsl:when test="$code='18624-7'">problem</xsl:when>  <xsl:when test="$code='55258-8'">problem</xsl:when>  <xsl:when test="$code='57852-6'">problem</xsl:when>  <xsl:when test="$code='73981-3'">problem</xsl:when>     <xsl:when test="$code='10160-0'">med</xsl:when> <xsl:when test="$code='10183-2'">med</xsl:when> <xsl:when test="$code='10216-0'">med</xsl:when> <xsl:when test="$code='18610-6'">med</xsl:when> <xsl:when test="$code='29549-3'">med</xsl:when> <xsl:when test="$code='42346-7'">med</xsl:when> <xsl:when test="$code='57072-1'">med</xsl:when> <xsl:when test="$code='59774-0'">med</xsl:when> <xsl:when test="$code='66149-6'">med</xsl:when> <xsl:when test="$code='75311-1'">med</xsl:when> <xsl:when test="$code='80565-5'">med</xsl:when> <xsl:when test="$code='X-DCMED'">med</xsl:when> <xsl:when test="$code='X-HISTMED'">med</xsl:when>  <xsl:when test="$code='10213-7'">med</xsl:when>  <xsl:when test="$code='19009-0'">med</xsl:when>  <xsl:when test="$code='19010-8'">med</xsl:when>  <xsl:when test="$code='19011-6'">med</xsl:when>  <xsl:when test="$code='19790-5'">med</xsl:when>  <xsl:when test="$code='29550-1'">med</xsl:when>  <xsl:when test="$code='29551-9'">med</xsl:when>  <xsl:when test="$code='64498-9'">med</xsl:when>  <xsl:when test="$code='67844-1'">med</xsl:when>  <xsl:when test="$code='67849-0'">med</xsl:when>  <xsl:when test="$code='70935-2'">med</xsl:when>   <xsl:when test="$code='101.16022'">med</xsl:when> <xsl:when test="$code='101.16146.4.1.1'">med</xsl:when> <xsl:when test="$code='101.16146.4.1.2'">med</xsl:when>  <xsl:when test="$code='11369-6'">imm</xsl:when>  <xsl:when test="$code='X-HADX'">dx</xsl:when> <xsl:when test="$code='46241-6'">dx</xsl:when> <xsl:when test="$code='X-VDX'">dx</xsl:when> <xsl:when test="$code='51848-0'">dx</xsl:when> <xsl:when test="$code='11535-2'">dx</xsl:when> <xsl:when test="$code='C-CDAV2-DDN'">dx</xsl:when> <xsl:when test="$code='10218-6'">dx</xsl:when> <xsl:when test="$code='59769-0'">dx</xsl:when> <xsl:when test="$code='10219-4'">dx</xsl:when> <xsl:when test="$code='55109-3'">dx</xsl:when> <xsl:when test="$code='59768-2'">dx</xsl:when>  <xsl:when test="$code='29299-5'">dx</xsl:when> <xsl:when test="$code='46239-0'">dx</xsl:when> <xsl:when test="$code='10154-3'">dx</xsl:when>  <xsl:when test="$code='10217-8'">dx</xsl:when>  <xsl:when test="$code='10222-8'">dx</xsl:when> <xsl:when test="$code='18822-7'">dx</xsl:when> <xsl:when test="$code='19778-0'">dx</xsl:when> <xsl:when test="$code='29548-5'">dx</xsl:when> <xsl:when test="$code='42347-5'">dx</xsl:when> <xsl:when test="$code='67194-1'">dx</xsl:when> <xsl:when test="$code='67438-2'">dx</xsl:when> <xsl:when test="$code='67800-3'">dx</xsl:when>  <xsl:when test="$code='101.16006'">dx</xsl:when> <xsl:when test="$code='101.16142'">dx</xsl:when> <xsl:when test="$code='102.15513.4.1.1'">dx</xsl:when>  <xsl:when test="$code='8716-3'">vital</xsl:when> <xsl:when test="$code='X-CE-GC'">vital</xsl:when> <xsl:when test="$code='29545-1'">vital</xsl:when> <xsl:when test="$code='57061-4'">vital</xsl:when> <xsl:when test="$code='59770-8'">vital</xsl:when> <xsl:when test="$code='67801-1'">vital</xsl:when>   <xsl:when test="$code='X-RFR'">comm</xsl:when>  <xsl:when test="$code='10164-2'">notes</xsl:when> <xsl:when test="$code='8648-8'">notes</xsl:when> <xsl:when test="$code='X-DD'">notes</xsl:when> <xsl:when test="$code='18841-7'">notes</xsl:when> <xsl:when test="$code='61150-9'">notes</xsl:when> <xsl:when test="$code='61149-1'">notes</xsl:when> <xsl:when test="$code='51847-2'">notes</xsl:when> <xsl:when test="$code='28570-0'">notes</xsl:when> <xsl:when test="$code='34117-2'">notes</xsl:when> <xsl:when test="$code='11488-4'">notes</xsl:when> <xsl:when test="$code='34746-8'">notes</xsl:when> <xsl:when test="$code='11504-8'">notes</xsl:when> <xsl:when test="$code='34109-9'">notes</xsl:when>  <xsl:when test="$code='11544-4'">notes</xsl:when>  <xsl:when test="$code='57059-8'">notes</xsl:when>  <xsl:when test="$code='60733-3'">notes</xsl:when>  <xsl:when test="$code='8650-4'">notes</xsl:when>   <xsl:when test="$code='8653-8'">instruct</xsl:when> <xsl:when test="$code='69730-0'">instruct</xsl:when> <xsl:when test="$code='19819-2'">instruct</xsl:when>  <xsl:when test="$code='19820-0'">instruct</xsl:when>    <xsl:when test="$code='18776-5'">plan</xsl:when> <xsl:when test="$code='62387-6'">plan</xsl:when> <xsl:when test="$code='11383-7'">plan</xsl:when>  <xsl:when test="$code='30954-2'">result</xsl:when> <xsl:when test="$code='26436-6'">result</xsl:when>  <xsl:when test="contains(',18717-9,1871-7,18719-5,18720-3,18721-1,18722-9,18723-7,18724-5,18725-2,18727-8,18728-6,18729-4,18767-4,18768-2,18769-0,26435-8,26346-6,26437-4,26438-2',concat(',',$code,','))">result</xsl:when> <xsl:when test="$code='11493-4'">result</xsl:when> <xsl:when test="$code='121070'">result</xsl:when> <xsl:when test="$code='59776-5'">result</xsl:when> <xsl:when test="$code='48767-8'">result</xsl:when>   <xsl:when test="$code='10215-2'">result</xsl:when>  <xsl:when test="$code='11451-2'">result</xsl:when>  <xsl:when test="$code='12132-7'">result</xsl:when>  <xsl:when test="$code='18696-5'">result</xsl:when>  <xsl:when test="$code='22032-7'">result</xsl:when>   <xsl:when test="$code='18783-1'">imaging</xsl:when>  <xsl:when test="$code='18846-6'">imaging</xsl:when>  <xsl:when test="$code='19008-2'">imaging</xsl:when>  <xsl:when test="$code='22030-1'">imaging</xsl:when>  <xsl:when test="$code='22031-9'">imaging</xsl:when>   <xsl:when test="$code='18844-1'">ecg</xsl:when>  <xsl:when test="$code='10223-6'">proc</xsl:when> <xsl:when test="$code='11537-8'">proc</xsl:when> <xsl:when test="$code='29544-3'">proc</xsl:when> <xsl:when test="$code='29554-3'">proc</xsl:when> <xsl:when test="$code='47519-4'">proc</xsl:when> <xsl:when test="$code='59772-4'">proc</xsl:when> <xsl:when test="$code='59773-2'">proc</xsl:when> <xsl:when test="$code='59775-7'">proc</xsl:when>   <xsl:when test="$code='10185-7'">proc</xsl:when>  <xsl:when test="$code='10221-0'">proc</xsl:when>  <xsl:when test="$code='22033-5'">proc</xsl:when>  <xsl:when test="$code='55102-8'">proc</xsl:when>  <xsl:when test="$code='55103-6'">proc</xsl:when>  <xsl:when test="$code='55104-4'">proc</xsl:when>  <xsl:when test="$code='67802-9'">proc</xsl:when>  <xsl:when test="$code='8724-7'">proc</xsl:when>   <xsl:when test="$code='10157-6'">fam</xsl:when> <xsl:when test="$code='29762-2'">hx</xsl:when> <xsl:when test="$code='10167-5'">hx</xsl:when> <xsl:when test="$code='11329-0'">hx</xsl:when> <xsl:when test="$code='X-FV'">hx</xsl:when> <xsl:when test="$code='10162-6'">hx</xsl:when>  <xsl:when test="$code='10156-8'">hx</xsl:when>  <xsl:when test="$code='10166-7'">hx</xsl:when>  <xsl:when test="$code='11322-5'">hx</xsl:when>  <xsl:when test="$code='11330-8'">hx</xsl:when>  <xsl:when test="$code='11334-0'">hx</xsl:when>  <xsl:when test="$code='11338-1'">hx</xsl:when>  <xsl:when test="$code='11342-3'">hx</xsl:when>  <xsl:when test="$code='11344-9'">hx</xsl:when>  <xsl:when test="$code='11350-6'">hx</xsl:when>  <xsl:when test="$code='11366-2'">hx</xsl:when>  <xsl:when test="$code='11374-6'">hx</xsl:when>  <xsl:when test="$code='18663-5'">hx</xsl:when>  <xsl:when test="$code='18675-9'">hx</xsl:when>  <xsl:when test="$code='19775-6'">hx</xsl:when>  <xsl:when test="$code='29546-9'">hx</xsl:when>  <xsl:when test="$code='38211-9'">hx</xsl:when>  <xsl:when test="$code='42544-7'">hx</xsl:when>  <xsl:when test="$code='56833-7'">hx</xsl:when>  <xsl:when test="$code='67842-5'">hx</xsl:when>  <xsl:when test="$code='67843-3'">hx</xsl:when>  <xsl:when test="$code='70934-5'">hx</xsl:when>   <xsl:when test="$code='X-HE'">event</xsl:when> <xsl:when test="$code='11336-5'">event</xsl:when> <xsl:when test="$code='11346-4'">event</xsl:when> <xsl:when test="$code='19822-6'">event</xsl:when> <xsl:when test="$code='46240-8'">event</xsl:when> <xsl:when test="$code='85847-2'">event</xsl:when>  <xsl:when test="$code='46264-8'">implant</xsl:when> <xsl:when test="$code='55122-6'">implant</xsl:when> <xsl:when test="$code='57080-4'">implant</xsl:when> <xsl:when test="$code='59771-6'">implant</xsl:when>  <xsl:when test="$code='10210-3'">status</xsl:when> <xsl:when test="$code='10158-4'">status</xsl:when> <xsl:when test="$code='10190-7'">status</xsl:when> <xsl:when test="$code='11332-4'">status</xsl:when> <xsl:when test="$code='42345-9'">status</xsl:when> <xsl:when test="$code='47420-5'">status</xsl:when>  <xsl:when test="$code='61146-7'">goal</xsl:when>  <xsl:when test="$code='42348-3'">advdir</xsl:when> <xsl:when test="$code='67840-9'">advdir</xsl:when> <xsl:when test="$code='75773-2'">advdir</xsl:when> <xsl:when test="$code='75774-0'">advdir</xsl:when> <xsl:when test="$code='75775-7'">advdir</xsl:when> <xsl:when test="$code='75776-5'">advdir</xsl:when> <xsl:when test="$code='75777-3'">advdir</xsl:when> <xsl:when test="$code='75778-1'">advdir</xsl:when> <xsl:when test="$code='75779-9'">advdir</xsl:when> <xsl:when test="$code='75780-7'">advdir</xsl:when> <xsl:when test="$code='75781-5'">advdir</xsl:when> <xsl:when test="$code='75782-3'">advdir</xsl:when> <xsl:when test="$code='75786-4'">advdir</xsl:when> <xsl:when test="$code='75793-0'">advdir</xsl:when>  <xsl:when test="$code='48768-6'">insurance</xsl:when>  <xsl:when test="contains($code,'42344-2,61144-2')">nutrition</xsl:when> <xsl:when test="$code='11320-9'">nutrition</xsl:when>    <xsl:when test="$code='75303-8'">nutrition</xsl:when>    <xsl:when test="$code='75306-1'">nutrition</xsl:when>    <xsl:when test="$code='75307-9'">nutrition</xsl:when>     <xsl:when test="$code='72055-7'">lda</xsl:when>      <xsl:when test="$code='X-TXPHSB'">plan</xsl:when>     <xsl:when test="$code='X-DIALHX'">plan</xsl:when>         <xsl:when test="$code='X-ONCSUMM-CURPLANS'">plan</xsl:when>       <xsl:when test="$code='X-ONCSUMM-PASTPLANS'">hx</xsl:when>       <xsl:when test="$code='X-ONCSUMM-RADTX'">goal</xsl:when>       <xsl:when test="$code='X-ONCSUMM-LDT'">vital</xsl:when>       <xsl:when test="$code='X-ONCSUMM-TXSUMM'">mammo</xsl:when>        <xsl:when test="$code='X-RESEARCH-STUDY-INFO'">research</xsl:when>  <xsl:when test="$code='10184-0'">other</xsl:when>     <xsl:when test="$code='42349-1'">other</xsl:when>     <xsl:when test="$code='10187-3'">other</xsl:when>      <xsl:when test="$code='10159-2'">nonclin</xsl:when>  <xsl:when test="$code='10161-8'">nonclin</xsl:when>  <xsl:when test="$code='10182-4'">nonclin</xsl:when>  <xsl:when test="$code='10186-5'">nonclin</xsl:when>  <xsl:when test="$code='11459-5'">nonclin</xsl:when>  <xsl:when test="$code='11294-6'">nonclin</xsl:when>  <xsl:when test="$code='11340-7'">nonclin</xsl:when>  <xsl:when test="$code='11380-3'">nonclin</xsl:when>  <xsl:when test="$code='21847-9'">nonclin</xsl:when>  <xsl:when test="$code='21848-7'">nonclin</xsl:when>  <xsl:when test="$code='45419-9'">nonclin</xsl:when>  <xsl:when test="$code='55280-2'">nonclin</xsl:when>  <xsl:when test="$code='61135-0'">nonclin</xsl:when>  <xsl:when test="$code='74164-5'">nonclin</xsl:when>    <xsl:when test="contains($title,'RESULT')">result</xsl:when> <xsl:when test="contains($title,'RESULTS')">result</xsl:when>   <xsl:when test="contains($title,'NOTES')">notes</xsl:when> <xsl:when test="contains($title,'REPORT')">notes</xsl:when> </xsl:choose> </xsl:variable>  <xsl:choose> <xsl:when test="$type='result'"> <xsl:choose> <xsl:when test="$code='121070'">imaging</xsl:when> <xsl:when test="contains($title,'IMAGING')">imaging</xsl:when> <xsl:when test="contains($title,'IMAGE')">imaging</xsl:when> <xsl:when test="contains($title,'EKG')">ecg</xsl:when> <xsl:when test="contains($title,'ECG')">ecg</xsl:when> <xsl:otherwise><xsl:value-of select="$type"/></xsl:otherwise> </xsl:choose> </xsl:when> <xsl:otherwise><xsl:value-of select="$type"/></xsl:otherwise> </xsl:choose> </xsl:template>   <xsl:template name="AddImageB64"> <xsl:param name="imageTypeName" /> <xsl:param name="class">hIcon</xsl:param>  <xsl:variable name="imageBase64"> <xsl:call-template name="imageBase64"> <xsl:with-param name="type" select="$imageTypeName"/> </xsl:call-template> </xsl:variable>  <xsl:if test="$imageBase64!=''">  <img class="{$class}" src="{concat('data:image/png;base64,',$imageBase64)}" alt="{$imageTypeName}" /> </xsl:if>  </xsl:template>   <xsl:template name="imageBase64"> <xsl:param name="type" /> <xsl:choose>   <xsl:when test="$type='info'">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAdVBMVEX///9OZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZOZHZjw2nyAAAAJnRSTlMABg8XGBocHSA8QEFCRkdiZHJ7io2Onp+jucXIydDa4OTo6+7z+ivfV4sAAACFSURBVBjTbY9JDgIhFESfoo1IK06IE6gI//5HdAMxRmtXldQE/6B9qjV53bkrwSplQ3GNZwP7131msgPQxQAXeYIpGvABYFjMgeCBZIFpjCvAJqAqYBQZAFW7sJUHXUgWOMmZbvEBuMmRHqqLgSjXzaTV4rLhILKjDQNXwrhefqb/nvvCGy3RCfcFFmlNAAAAAElFTkSuQmCC</xsl:when>  <!--caution icon --> <xsl:when test="$type='caution'">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAGTSURBVDhPfVM7SANBEF3wSCESvfM4ogHzEQtJTtHCykq7+A1WElDxg6WCiIhgIUoKG7GwEiGFpWgVCzkxiFjYqL02ksZCkl4c7623x302DrwwyXtvN7Mzw4JxeZTObS4YlfxItN7VESEA+daScXdeTE04MnmsF4x7Q1NoflKjs70EvZUzVLWyVD7ppuJaJ+ltCs2Nq0+OPBQ0PNhCnxWTvp8HuBmHiIPwGzhooP2zOIGbcStEAiszuhDy3MtBOz0afeFm1KyrCn099PlEwizg5eqP/YRSS/vJKba7Grs93Ij7BMCQ2eyakQf5xXw77dheNptTa1fH6ZCgdJBwD0Ae5OEpjGk1loxHfj5usiEBoLU2ccg4eFK2l+Gj0QHbyzEOGQcPLmf4G7ISgPfrDIeMgwflMzwEHkQm+g94eDSAoRVoCVrjFVQt031E5F4OLUfrMQI2zxiGIjhIrxe97gHIvRy0GD5u9oRvlAHrtIdDfG84yiKwKFgYLA4WCIskdgK3olTZzb7AymJ1g+uMFXdrdoOxX0HQ7IxijdgtAAAAAElFTkSuQmCC</xsl:when>   <xsl:when test="$type='backArrow'">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAABvSURBVDhPpZJBDoAgDAT5D77PE8bfyCtNTWNJqO4aKpMsoRs6J5KITAWWkcAykvt4sJS625VCBbqcSz1tpEBBW/4l6JdH4gTRZY0T5O1Y0aOvOIESlbwESi+xigIFSpPYSKECJfyRZgLLSGA5HkkXkNMBxdinZdQAAAAASUVORK5CYII=</xsl:when>   <xsl:when test="$type='goToActivity'">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNv1OCegAAACmSURBVDhPY/j//z9FGKsgKRirICkYqyA2rBB1+j8Iayac/a+WdOO/YtzV/5Jxz7ArxoWVA9f8t8o5D8b2RVfAhmFViA+DNBmnnQFjkg0AaXAtOvUf5BLjlEP/1WNPYFeIDYM0uxcdA2sG8UE0KBywKkbH6JphGBSoKApxYZABIIwuDsIYAtgwzAXo4iCMIYALU+QCGMZmCAqHHIxVkBSMVZB4/J8BAJVw5h3cx2t0AAAAAElFTkSuQmCC</xsl:when>  </xsl:choose> </xsl:template>   <xsl:template match="cda:addr">  <xsl:variable name="realmCode"> <xsl:call-template name="RealmCode"/> </xsl:variable>  <xsl:variable name="use"> <xsl:if test="count(parent::*/cda:addr)>1 or $realmCode = 'NL'"> <xsl:variable name="useVal"> <xsl:call-template name="Use"> <xsl:with-param name="use" select="@use"/> </xsl:call-template> </xsl:variable> <xsl:if test="$useVal!=''"> <span class="italics"> <xsl:value-of select="concat(' (',$useVal,')')"/> </span> </xsl:if> </xsl:if> </xsl:variable>  <xsl:variable name="addressHTML"> <xsl:if test="normalize-space(.) != ''">  <xsl:if test="preceding-sibling::cda:addr or cda:useablePeriod/cda:high/@value"> <xsl:apply-templates select="cda:useablePeriod" /> </xsl:if>  <xsl:choose>  <xsl:when test="$realmCode = 'US'">  <xsl:for-each select="cda:streetAddressLine"> <xsl:if test="not(@nullFlavor)"> <xsl:value-of select="." /> <xsl:if test="position()=1"> <xsl:copy-of select="$use" /> </xsl:if> <br/> </xsl:if> </xsl:for-each>   <xsl:variable name="cityStateZip"> <xsl:variable name="unnormalized"> <xsl:call-template name="CityStateZipUS" /> </xsl:variable> <xsl:value-of select="normalize-space($unnormalized)"/> </xsl:variable> <xsl:value-of select="$cityStateZip"/>   <xsl:if test="cda:country/text() and ($showUS='ShowUS' or (cda:country!='US' and cda:country!='USA'))">  <xsl:if test="$cityStateZip"><xsl:text>, </xsl:text></xsl:if> <xsl:value-of select="cda:country"/> </xsl:if>   <xsl:if test="count(cda:streetAddressLine[not(@nullFlavor)])=0"> <xsl:copy-of select="$use"/> </xsl:if> </xsl:when>   <xsl:otherwise> <xsl:apply-templates mode="intlAddr"> <xsl:with-param name="realmCode" select="$realmCode"/> </xsl:apply-templates>  <xsl:copy-of select="$use"/> </xsl:otherwise> </xsl:choose> </xsl:if> </xsl:variable>   <xsl:if test="$addressHTML != ''"> <xsl:if test="preceding-sibling::cda:addr"> <br/><br/> </xsl:if> <xsl:copy-of select="$addressHTML"/> </xsl:if> </xsl:template>   <xsl:template name="CityStateZipUS"> <xsl:variable name="city" select="cda:city/text()"/> <xsl:variable name="state" select="cda:state/text()"/> <xsl:variable name="zip" select="cda:postalCode/text()" />  <xsl:variable name="cityState"> <xsl:choose>  <xsl:when test="$city!='' and $state!='' and substring($city,string-length($city))=','"> <xsl:value-of select="concat($city,' ',$state)"/> </xsl:when> <xsl:when test="$city!='' and $state!=''"> <xsl:value-of select="concat($city,', ',$state)"/> </xsl:when> <xsl:otherwise> <xsl:value-of select="$city"/> <xsl:value-of select="$state"/> </xsl:otherwise> </xsl:choose> </xsl:variable>  <xsl:value-of select="$cityState"/> <xsl:if test="$cityState!='' and $zip!=''"><xsl:text> </xsl:text></xsl:if> <xsl:value-of select="$zip"/>  </xsl:template>   <xsl:template match="*" mode="intlAddr"> <xsl:param name="realmCode"/>  <xsl:if test="not(@nullFlavor)"> <xsl:choose>  <xsl:when test="((self::cda:city or self::cda:precinct or self::cda:postalCode) and not(preceding-sibling::cda:city or preceding-sibling::cda:precinct or preceding-sibling::cda:postalCode)) or (self::cda:streetAddressLine and preceding-sibling::*[1]/self::cda:streetAddressLine)"> <br/> <xsl:value-of select="."/> </xsl:when>  <xsl:when test="self::cda:country"> <xsl:if test="text() != $realmCode"> <br/> <xsl:value-of select="."/> </xsl:if> </xsl:when>  <xsl:when test="self::cda:county and ($realmCode = 'NL')"> </xsl:when>  <xsl:otherwise> <xsl:value-of select="."/> </xsl:otherwise> </xsl:choose>  <xsl:text> </xsl:text> </xsl:if> </xsl:template>  <xsl:template match="cda:useablePeriod">  <xsl:choose> <xsl:when test="@xsi:type='IVL_TS'"> <span class="italics"> <xsl:variable name="isFormer"> <xsl:call-template name="CompareInstants"> <xsl:with-param name="inst" select="$docDate"/> <xsl:with-param name="other" select="cda:high/@value"/> </xsl:call-template> </xsl:variable> <xsl:if test="$isFormer = 'true'"> <xsl:text>Former </xsl:text> </xsl:if> <xsl:text>(</xsl:text> <xsl:if test="cda:low[not(@nullFlavor)]"> <xsl:call-template name="Date"> <xsl:with-param name="date" select="cda:low/@value" /> </xsl:call-template> </xsl:if> <xsl:text> - </xsl:text> <xsl:if test="cda:high[not(@nullFlavor)]"> <xsl:call-template name="Date"> <xsl:with-param name="date" select="cda:high/@value" /> </xsl:call-template> </xsl:if> <xsl:text>):</xsl:text> </span> <br/> </xsl:when> </xsl:choose> </xsl:template>   <xsl:template match="cda:telecom"> <xsl:variable name="fax" xml:id="langFax">Fax</xsl:variable> <xsl:variable name="prefix" select="translate(substring-before(@value,':'),$ucletters,$lcletters)" /> <xsl:variable name="number"> <xsl:choose> <xsl:when test="contains(@value,'://')"> <xsl:value-of select="substring-after(@value,'://')"/> </xsl:when> <xsl:when test="contains(@value,':')"> <xsl:value-of select="substring-after(@value,':')"/> </xsl:when> <xsl:otherwise> <xsl:value-of select="@value" /> </xsl:otherwise> </xsl:choose> </xsl:variable>   <xsl:variable name="countryPrefix"> <xsl:variable name="realmCode"> <xsl:call-template name="RealmCode"/> </xsl:variable> <xsl:choose>  <xsl:when test="$realmCode = 'US' or $realmCode = 'CA'">+1</xsl:when> </xsl:choose> </xsl:variable>   <xsl:choose> <xsl:when test="$countryPrefix != '' and starts-with($number, $countryPrefix)"> <xsl:variable name="strippedNumber" select="substring-after($number, $countryPrefix)"/> <xsl:choose> <xsl:when test="starts-with($strippedNumber, '-')"> <xsl:value-of select="substring($strippedNumber, 2)"/> </xsl:when> <xsl:otherwise> <xsl:value-of select="$strippedNumber"/> </xsl:otherwise> </xsl:choose> </xsl:when> <xsl:otherwise> <xsl:value-of select="$number" /> </xsl:otherwise> </xsl:choose>   <xsl:choose> <xsl:when test="contains($prefix,'fax')"> (Fax)</xsl:when> <xsl:when test="contains($prefix,'text')"> (TTY)</xsl:when> </xsl:choose>  <xsl:if test="@value and @use and not(@nullFlavor)"> <xsl:text> (</xsl:text> <xsl:call-template name="Use"> <xsl:with-param name="use" select="@use"/> </xsl:call-template> <xsl:text>)</xsl:text> </xsl:if>   <xsl:if test="@value"><br/></xsl:if> </xsl:template>   <xsl:template name="Use"> <xsl:param name="use"/> <xsl:choose xml:id="vocabHL7PhoneType">  <xsl:when test="contains($use,' ')"> <xsl:call-template name="Use"> <xsl:with-param name="use" select="substring-before($use,' ')"/> </xsl:call-template> <xsl:value-of select="$ListSep"/>  <xsl:call-template name="Use"> <xsl:with-param name="use" select="substring-after($use,' ')"/> </xsl:call-template> </xsl:when> <xsl:when test="$use = 'H' or $use = 'HP'">Home</xsl:when> <xsl:when test="$use = 'WP'">Work</xsl:when> <xsl:when test="$use = 'MC'">Mobile</xsl:when> <xsl:when test="$use = 'AS'">Answering Service</xsl:when> <xsl:when test="$use = 'EC'">Emergency Contact</xsl:when> <xsl:when test="$use = 'PG'">Pager</xsl:when> <xsl:when test="$use = 'HV'">Vacation</xsl:when> <xsl:when test="$use = 'DIR'">Direct</xsl:when> <xsl:when test="$use = 'PUB'">Public</xsl:when> <xsl:when test="$use = 'BAD'">Invalid</xsl:when> <xsl:when test="$use = 'TMP'">Temporary</xsl:when> <xsl:otherwise><xsl:value-of select="$Other"/></xsl:otherwise> </xsl:choose> </xsl:template>  <xsl:template name="DocTypeAndGenDate"> <xsl:if test="$docDate and string-length($docDate)>7">  <xsl:call-template name="sectionTitle"/>   <xsl:text>, generated on </xsl:text> <xsl:call-template name="AccessibleDate"> <xsl:with-param name="date" select="$docDate"/> </xsl:call-template> </xsl:if> </xsl:template>   <xsl:key name="AuthorIndex"  match="cda:author[cda:templateId[@root='2.16.840.1.113883.10.20.22.5.6']] /cda:assignedAuthor[(cda:representedOrganization | cda:assignedPerson)[not(@nullFlavor)]/cda:name[not(@nullFlavor)]] /cda:id[@extension!='' and @root!='']"  use="@extension"/>   <xsl:key name="AuthorRootIndex"  match="cda:author[cda:templateId[@root='2.16.840.1.113883.10.20.22.5.6']] /cda:assignedAuthor[(cda:representedOrganization | cda:assignedPerson)[not(@nullFlavor)]/cda:name[not(@nullFlavor)]] /cda:id[@root!='' and not(@extension | @nullFlavor)]"  use="@root"/>  <xsl:key name="RefIndex" match="cda:reference" use="@value"/>   <xsl:template match="@ID" mode="Provenance"> <xsl:variable name="ddRef" select="key('RefIndex',concat('#',.))"/>  <xsl:variable name="contextBreaks" select="count($ddRef/ancestor::cda:entryRelationship[@contextConductionInd='false'])" /> <xsl:variable name="ancestry" select="$ddRef/ancestor-or-self::*[ancestor-or-self::cda:entry][count(ancestor-or-self::cda:entryRelationship[@contextConductionInd='false']) = $contextBreaks][cda:author][1]" /> <xsl:variable name="author" select="($ancestry/cda:author[cda:templateId[@root='2.16.840.1.113883.10.20.22.5.6']])[last()]" /> <xsl:variable name="authorName" select="$author/cda:assignedAuthor/cda:assignedPerson/cda:name[not(@nullFlavor)]" /> <xsl:variable name="authorOrg" select="$author/cda:assignedAuthor/cda:representedOrganization/cda:name[not(@nullFlavor)]" />  <xsl:choose>  <xsl:when test="$authorName or $authorOrg" > <xsl:variable name="tooltipText"> <xsl:call-template name="BuildProvenanceCard"> <xsl:with-param name="authorName" select="$authorName"/> <xsl:with-param name="authorTime" select="$author/cda:time/@value"/> <xsl:with-param name="authorOrg" select="$authorOrg"/> </xsl:call-template> </xsl:variable> <xsl:value-of select="$tooltipText"/> </xsl:when>  <xsl:otherwise> <xsl:call-template name="ProcessAuthorIds"> <xsl:with-param name="localAuthor" select="$author"/> <xsl:with-param name="authorId" select="$author/cda:assignedAuthor/cda:id[1]"/> </xsl:call-template> </xsl:otherwise> </xsl:choose> </xsl:template>   <xsl:template name="ProcessAuthorIds"> <xsl:param name="localAuthor"/> <xsl:param name="authorId"/> <xsl:variable name="nextId" select="$authorId/following-sibling::cda:id[1]"/> <xsl:if test="$authorId"> <xsl:variable name="srcAuthorIds" select="(key('AuthorIndex',$authorId[@extension!='' and @root!='']/@extension))[(@extension=$authorId/@extension) and (@root=$authorId/@root) and (generate-id(.)!=generate-id($authorId))] | (key('AuthorRootIndex',$authorId[@root!='' and not(@extension | @nullFlavor)]/@root))[generate-id(.)!=generate-id($authorId)]"/>  <xsl:choose>  <xsl:when test="$srcAuthorIds"> <xsl:variable name="tooltipText"> <xsl:call-template name="BuildProvenanceCard"> <xsl:with-param name="authorName" select="$srcAuthorIds/parent::cda:assignedAuthor/cda:assignedPerson/cda:name[not(@nullFlavor)]"/> <xsl:with-param name="authorTime" select="$localAuthor/cda:time/@value"/> <xsl:with-param name="authorOrg" select="$srcAuthorIds/parent::cda:assignedAuthor/cda:representedOrganization/cda:name[not(@nullFlavor)]"/> </xsl:call-template> </xsl:variable> <xsl:value-of select="$tooltipText"/> </xsl:when>  <xsl:when test="$nextId"> <xsl:call-template name="ProcessAuthorIds"> <xsl:with-param name="localAuthor" select="$localAuthor"/> <xsl:with-param name="authorId" select="$nextId"/> </xsl:call-template> </xsl:when> </xsl:choose> </xsl:if> </xsl:template>   <xsl:template name="BuildProvenanceCard"> <xsl:param name="authorName"/> <xsl:param name="authorTime"/> <xsl:param name="authorOrg"/>  <xsl:if test="$authorTime!=''"> <xsl:variable name="time"> Authored on: <xsl:call-template name="Date"> <xsl:with-param name="date" select="$authorTime"/> <xsl:with-param name="showTime" select="true()"/> </xsl:call-template> </xsl:variable> <xsl:value-of select="normalize-space($time)" /> <xsl:text>&#10;</xsl:text> </xsl:if> <xsl:if test="$authorOrg!=''"> <xsl:variable name="org"> Source organization: <xsl:value-of select="$authorOrg" /> </xsl:variable> <xsl:value-of select="normalize-space($org)" /> </xsl:if> </xsl:template>   </xsl:stylesheet> 